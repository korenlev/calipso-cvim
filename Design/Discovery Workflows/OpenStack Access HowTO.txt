Abstract
--------
This document describes how to access the 4 interface types into OpenStack infrastructure: SDK, API, DB, CLI
Main reference:  http://developer.OpenStack.org/ - but the following is a good cheat-sheet...

See also
--------
[1] design/lab setup/Mirantis-OpenStack.txt


----------------------------------------------------------------------------------------------------------------

SDK
===
TBD
https://libcloud.apache.org/
Python SDK might be an interesting option !

----------------------------------------------------------------------------------------------------------------

API
===
The first access point into OpenStack API should be Keystone, known sometimes as 'Identity' or 'authenticate' API.
Currently there are 3 known version of Keystone API, the latest being v3.
We therefore need to choose the proper one based on the particular environment.
Our LAB environment, which is based on current commit to executives, is: Mirantis OpenStack with OpenVSwitch and Linux Bridge as Neutron plugin.
This is the distro and plugin used by cisco Webex Worldwide, which might be our first customer. 

Latest keystone API docs
------------------------
- http://developer.OpenStack.org/api-ref-identity-admin-v2.html   
  - typically v1 uses user/pass, v2 uses simple authentication with a local token (see value of 'admin_token' at /etc/keystone/keystone.conf)
- http://developer.OpenStack.org/api-ref-identity-v3.html
  - v3 added support for SSL login using certificates and PKI, we might look at those details at later stages.

Tip: The best way to test the API using debug option of CLI commands:
# source /root/openrc
# nova --debug list
The output shows the API requests/responses made to OpenStack

Initial login using V2: Use admin token, found in /etc/keystone/keystone.conf
(in our case: admin_token=vIhNb1l2)

Example: how to get tenant list in V2
-------------------------------------
curl -i -X GET http://192.168.100.7:35357/v2.0/tenants -H "X-Auth-Token: vIhNb1l2"

Or using RestClient from remote (in our lab case):
- URL: http://10.56.20.74:7777/v2.0/tenants
  - note: in our lab remote ports might be different then local...
- Method: GET
- Request Headers: X-Auth-Token=vIhNb1l2b
- Request Body: (none)

Example: how to get region list with keystone API v3
----------------------------------------------------
Reference : https://github.com/OpenStack-attic/identity-api 

Using RestClient:
- URL: http://10.56.20.74:5000/v3/auth/tokens
- Method: POST
- Request Headers: Content-type=application/json
- Request Body:
{
    "auth": {
        "identity": {
            "methods": [
                "password"
            ],
            "password": {
                "user": {
                    "name": "admin",
                    "password": "admin",
                    "domain": {
                               "name":"Default"
                            }

                }
            }
        }
    }
}

The response contains "X-Subject-Token" - a session cookie to be used for further requests to v3!
The body of the response also contains other details like regions & access points to each region.
Note that the response gives private IP addresses. These should be replaced with the controller IP address!!

--------------------------------------------------------------------------------------------------

SQL
===
login to OpenStack DB (in our mirantis setup only, probably need to change later):
[optional ] ssh to the controller (or login local) and look for : vi /etc/mysql/conf.d/password.cnf     -get the PASS !

typical (initial) login:

mysql -u sqlUser -pPASS -h 10.56.20.74

allow ALL from remote, as needed :
mysql> GRANT ALL PRIVILEGES ON *.* TO 'USERNAME'@'%' IDENTIFIED BY 'replace with real pass' WITH GRANT OPTION;
mysql> FLUSH PRIVILEGES;

show databases;

use nova;

show tables;

etc....

----------------------------------------------------------------------------------------------------------------

SSH & CLI
=========
You will need the list of underlying server.
Get this list either: 
A) from the API
   or 
B) from the SQL DB: DB:nova, table: compute_nodes, then take the values of hypervisor_hostname, host_ip

NEXT STEPS: look at fetchX.txt files (under "Design\Discovery Workflows") for
specifics commands on the controller (local, where OSDNA code runs currently) and on the specific servers !



