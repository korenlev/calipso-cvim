{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/threejsTest.js","filenameRelative":"/client/threejsTest.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/threejsTest.js.map","sourceFileName":"/client/threejsTest.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"threejsTest"},"ignored":false,"code":"/*(function() {\r\n// D3.layout.force3d.js\r\n// (C) 2012 ziggy.jonsson.nyc@gmail.com\r\n// BSD license (http://opensource.org/licenses/BSD-3-Clause)\r\n\r\n    d3.layout.force3d = function() {\r\n        var  forceXY = d3.layout.force()\r\n            ,forceZ = d3.layout.force()\r\n            ,zNodes = {}\r\n            ,zLinks = {}\r\n            ,nodeID = 1\r\n            ,linkID = 1\r\n            ,tickFunction = Object\r\n\r\n        var force3d = {}\r\n\r\n        Object.keys(forceXY).forEach(function(d) {\r\n            force3d[d] = function() {\r\n                var result = forceXY[d].apply(this,arguments)\r\n                if (d !=\"nodes\" && d!=\"links\")  forceZ[d].apply(this,arguments)\r\n                return (result == forceXY) ? force3d : result\r\n            }\r\n        })\r\n\r\n\r\n        force3d.on = function(name,fn) {\r\n            tickFunction = fn\r\n            return force3d\r\n        }\r\n\r\n\r\n        forceXY.on(\"tick\",function() {\r\n\r\n            // Refresh zNodes add new, delete removed\r\n            var _zNodes = {}\r\n            forceXY.nodes().forEach(function(d,i) {\r\n                if (!d.id) d.id = nodeID++\r\n                _zNodes[d.id] = zNodes[d.id] ||  {x:d.z,px:d.z,py:d.z,y:d.z,id:d.id}\r\n                d.z =  _zNodes[d.id].x\r\n            })\r\n            zNodes = _zNodes\r\n\r\n            // Refresh zLinks add new, delete removed\r\n            var _zLinks = {}\r\n            forceXY.links().forEach(function(d) {\r\n                var nytt = false\r\n                if (!d.linkID) { d.linkID = linkID++;nytt=true}\r\n                _zLinks[d.linkID] = zLinks[d.linkID]  || {target:zNodes[d.target.id],source:zNodes[d.source.id]}\r\n\r\n            })\r\n            zLinks = _zLinks\r\n\r\n            // Update the nodes/links in forceZ\r\n            forceZ.nodes(d3.values(zNodes))\r\n            forceZ.links(d3.values(zLinks))\r\n            forceZ.start() // Need to kick forceZ so we don't lose the update mechanism\r\n\r\n            // And run the user defined function, if defined\r\n            tickFunction()\r\n        })\r\n\r\n        // Expose the sub-forces for debugging purposes\r\n        force3d.xy = forceXY\r\n        force3d.z = forceZ\r\n\r\n        return force3d\r\n    }\r\n})()*/\nTemplate.threeTest.rendered = function () {\n    function getGraphData() {\n        nodeId = 'node-24';\n        //d3.json(\"miserables.json\", function(error, graph) {\n\n        //var invNodes = Inventory.find({ \"type\": \"instance\", $and: [ { \"id\": nodeId } ] });\n        var invNodes = Inventory.find({ \"type\": \"instance\", $and: [{ \"host\": nodeId }] });\n\n        var edges = [];\n        var nodes = [];\n\n        invNodes.forEach(function (n) {\n            nodes = n[\"Entities\"];\n            edges = n[\"Relations\"];\n        });\n        //console.log(testNodes);\n        //var invEdges = Inventory.find({ \"type\": \"instance\", $and: [ { \"id\": nodeId } ] }[\"Edges\"]);\n\n        //var invEdges = EdgesList.find(nodeId).fetch();\n        //var invNodes = NodesList.find(nodeId).fetch();\n        //console.log(invEdges);\n\n        /*\r\n         var edges = Edges.find().fetch();\r\n         var nodes = Nodes.find().fetch();\r\n         */\n\n        nodes.forEach(function (n) {\n            n.name = n.label;\n            n.x = Math.random();\n            n.y = Math.random();\n        });\n        var edges_new = [];\n        edges.forEach(function (e) {\n            var sourceNode = nodes.filter(function (n) {\n                return n.id === e.from;\n            })[0],\n                targetNode = nodes.filter(function (n) {\n                return n.id === e.to;\n            })[0];\n\n            edges_new.push({ source: sourceNode, target: targetNode, value: 1, label: e.label, attributes: e.attributes });\n        });\n\n        var graph = {};\n        graph.nodes = nodes;\n        graph.links = edges_new;\n\n        //console.log(graph);\n\n        return graph;\n    }\n\n    var graph = getGraphData();\n\n    var color = d3.scale.category20();\n\n    var WIDTH = 700,\n        HEIGHT = 700;\n\n    var COLOR = \"#0f608b\";\n    var LINK_COLOR = \"#999999\";\n\n    var scene = new THREE.Scene();\n\n    // set some camera attributes\n    var VIEW_ANGLE = 45,\n        ASPECT = WIDTH / HEIGHT,\n        NEAR = 0.1,\n        FAR = 10000;\n\n    // get the DOM element to attach to\n    // - assume we've got jQuery to hand\n    var $container = $('#threeGraph');\n\n    // create a WebGL renderer, camera\n    // and a scene\n    var renderer = new THREE.WebGLRenderer({ alpha: true,\n        antialiasing: true });\n\n    renderer.setClearColor(0x000000, 0);\n\n    var camera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);\n\n    var scene = new THREE.Scene();\n\n    // add the camera to the scene\n    scene.add(camera);\n\n    // the camera starts at 0,0,0\n    // so pull it back\n    camera.position.z = 300;\n\n    // start the renderer\n    renderer.setSize(WIDTH, HEIGHT);\n\n    // attach the render-supplied DOM element\n    $container.append(renderer.domElement);\n\n    var spheres = [],\n        three_links = [];\n\n    // Define the 3d force\n    var force = d3.layout.force3d().nodes(sort_data = []).links(links = []).size([50, 50]).gravity(0.3).charge(-400);\n\n    var DISTANCE = 1;\n    //    var data = graph;\n    var data = {\n        \"nodes\": [{\n            \"x\": 469,\n            \"y\": 410\n        }, {\n            \"x\": 493,\n            \"y\": 364\n        }, {\n            \"x\": 442,\n            \"y\": 365\n        }, {\n            \"x\": 467,\n            \"y\": 314\n        }, {\n            \"x\": 477,\n            \"y\": 248\n        }, {\n            \"x\": 425,\n            \"y\": 207\n        }, {\n            \"x\": 402,\n            \"y\": 155\n        }, {\n            \"x\": 369,\n            \"y\": 196\n        }, {\n            \"x\": 350,\n            \"y\": 148\n        }, {\n            \"x\": 539,\n            \"y\": 222\n        }, {\n            \"x\": 594,\n            \"y\": 235\n        }, {\n            \"x\": 582,\n            \"y\": 185\n        }, {\n            \"x\": 633,\n            \"y\": 200\n        }],\n        \"links\": [{\n            \"source\": 0,\n            \"target\": 1\n        }, {\n            \"source\": 1,\n            \"target\": 2\n        }, {\n            \"source\": 2,\n            \"target\": 0\n        }, {\n            \"source\": 1,\n            \"target\": 3\n        }, {\n            \"source\": 3,\n            \"target\": 2\n        }, {\n            \"source\": 3,\n            \"target\": 4\n        }, {\n            \"source\": 4,\n            \"target\": 5\n        }, {\n            \"source\": 5,\n            \"target\": 6\n        }, {\n            \"source\": 5,\n            \"target\": 7\n        }, {\n            \"source\": 6,\n            \"target\": 7\n        }, {\n            \"source\": 6,\n            \"target\": 8\n        }, {\n            \"source\": 7,\n            \"target\": 8\n        }, {\n            \"source\": 9,\n            \"target\": 4\n        }, {\n            \"source\": 9,\n            \"target\": 11\n        }, {\n            \"source\": 9,\n            \"target\": 10\n        }, {\n            \"source\": 10,\n            \"target\": 11\n        }, {\n            \"source\": 11,\n            \"target\": 12\n        }, {\n            \"source\": 12,\n            \"target\": 10\n        }]\n    };\n\n    for (var i = 0; i < data.nodes.length; i++) {\n        sort_data.push({ x: data.nodes.x + DISTANCE, y: data.nodes.y + DISTANCE, z: 0 });\n\n        // set up the sphere vars\n        var radius = 5,\n            segments = 16,\n            rings = 16;\n\n        // create the sphere's material\n        var sphereMaterial = new THREE.MeshLambertMaterial({\n            color: COLOR\n        });\n\n        var sphere = new THREE.Mesh(new THREE.SphereGeometry(radius, segments, rings), sphereMaterial);\n\n        spheres.push(sphere);\n\n        // add the sphere to the scene\n        scene.add(sphere);\n    }\n\n    for (var i = 0; i < data.links.length; i++) {\n        links.push({ target: data.links[i].target, source: data.links[i].source });\n\n        var material = new THREE.LineBasicMaterial({ color: LINK_COLOR,\n            linewidth: 2 });\n        var geometry = new THREE.Geometry();\n\n        geometry.vertices.push(new THREE.Vector3(0, 0, 0));\n        geometry.vertices.push(new THREE.Vector3(0, 0, 0));\n        var line = new THREE.Line(geometry, material);\n        line.userData = { source: data.links[i].source,\n            target: data.links[i].target };\n        three_links.push(line);\n        scene.add(line);\n\n        force.start();\n    }\n\n    // set up the axes\n    var x = d3.scale.linear().domain([0, 350]).range([0, 10]),\n        y = d3.scale.linear().domain([0, 350]).range([0, 10]),\n        z = d3.scale.linear().domain([0, 350]).range([0, 10]);\n\n    force.on(\"tick\", function (e) {\n        for (var i = 0; i < sort_data.length; i++) {\n            spheres[i].position.set(x(sort_data[i].x) * 40 - 40, y(sort_data[i].y) * 40 - 40, 0);\n\n            for (var j = 0; j < three_links.length; j++) {\n                var line = three_links[j];\n                var vi = -1;\n                if (line.userData.source === i) {\n                    vi = 0;\n                }\n                if (line.userData.target === i) {\n                    vi = 1;\n                }\n\n                if (vi >= 0) {\n                    line.geometry.vertices[vi].x = x(sort_data[i].x) * 40 - 40;\n                    line.geometry.vertices[vi].y = y(sort_data[i].y) * 40 - 40;\n                    line.geometry.verticesNeedUpdate = true;\n                }\n            }\n        }\n\n        renderer.render(scene, camera);\n    });\n\n    // create a point light\n    var pointLight = new THREE.PointLight(0xFFFFFF);\n\n    // set its position\n    pointLight.position.x = 10;\n    pointLight.position.y = 50;\n    pointLight.position.z = 130;\n\n    // add to the scene\n    scene.add(pointLight);\n\n    var rotSpeed = 0.01;\n    function checkRotation() {\n\n        var x = camera.position.x,\n            y = camera.position.y,\n            z = camera.position.z;\n\n        camera.position.x = x * Math.cos(rotSpeed) - z * Math.sin(rotSpeed);\n        camera.position.z = z * Math.cos(rotSpeed) + x * Math.sin(rotSpeed);\n\n        camera.lookAt(scene.position);\n    }\n\n    function animate() {\n        requestAnimationFrame(animate);\n\n        checkRotation();\n\n        renderer.render(scene, camera);\n    }\n\n    animate();\n    /*   var data = [4, 8, 15, 16, 23, 42];\r\n    \n    // these are, as before, to make D3's .append() and .selectAll() work\r\n       THREE.Object3D.prototype.appendChild = function (c) { this.add(c); return c; };\r\n       THREE.Object3D.prototype.querySelectorAll = function () { return []; };\r\n    \n    // this one is to use D3's .attr() on THREE's objects\r\n       THREE.Object3D.prototype.setAttribute = function (name, value) {\r\n           var chain = name.split('.');\r\n           var object = this;\r\n           for (var i = 0; i < chain.length - 1; i++) {\r\n               object = object[chain[i]];\r\n           }\r\n           object[chain[chain.length - 1]] = value;\r\n       }\r\n    \n       var camera, scene, renderer, chart3d;\r\n    \n       init();\r\n       animate();\r\n    \n       function init () {\r\n           // standard THREE stuff, straight from examples\r\n           renderer = new THREE.WebGLRenderer();\r\n           renderer.setSize( window.innerWidth, window.innerHeight );\r\n           document.body.appendChild( renderer.domElement );\r\n    \n           camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 1000 );\r\n           camera.position.z = 400;\r\n    \n           scene = new THREE.Scene();\r\n    \n           var light = new THREE.DirectionalLight( 0xffffff );\r\n           light.position.set( 0, 0, 1 );\r\n           scene.add( light );\r\n    \n           var geometry = new THREE.CubeGeometry( 20, 20, 20 );\r\n           var material = new THREE.MeshLambertMaterial( {\r\n               color: 0x4682B4, shading: THREE.FlatShading, vertexColors: THREE.VertexColors } );\r\n    \n           // create container for our 3D chart\r\n           chart3d = new THREE.Object3D();\r\n           chart3d.rotation.x = 0.6;\r\n           scene.add( chart3d );\r\n    \n           // use D3 to set up 3D bars\r\n           d3.select( chart3d )\r\n               .selectAll()\r\n               .data(data)\r\n               .enter().append( function() { return new THREE.Mesh( geometry, material ); } )\r\n               .attr(\"position.x\", function(d, i) { return 30 * i; })\r\n               .attr(\"position.y\", function(d, i) { return d; })\r\n               .attr(\"scale.y\", function(d, i) { return d / 10; })\r\n    \n           // continue with THREE stuff\r\n           window.addEventListener( 'resize', onWindowResize, false );\r\n       }\r\n    \n       function onWindowResize() {\r\n    \n           camera.aspect = window.innerWidth / window.innerHeight;\r\n           camera.updateProjectionMatrix();\r\n    \n           renderer.setSize( window.innerWidth, window.innerHeight );\r\n    \n       }\r\n    \n       function animate() {\r\n    \n           requestAnimationFrame( animate );\r\n    \n           chart3d.rotation.y += 0.01;\r\n    \n           renderer.render( scene, camera );\r\n    \n       }\r\n    */\n\n    /*\r\n    \r\n        var d3obj = d3.select(\"#threeGraph\").append(\"svg\")\r\n            .attr(\"width\", \"100%\")\r\n            .attr(\"height\", \"100%\");\r\n    \r\n        var force = d3.layout.force()\r\n            .charge(-120)\r\n            .linkDistance(30)\r\n            .size([700, 700]);\r\n    \r\n        force\r\n            .nodes(graph.nodes)\r\n            .links(graph.links)\r\n            .start(10,15,20);\r\n    */\n\n    /*\r\n        var d3obj = d3.select( chart )\r\n            .selectAll()\r\n            //.data(graph.nodes)\r\n            //.enter()\r\n            .append( createDiv )\r\n            .style(\"width\", function(d) { return d * 10 + \"px\"; })\r\n            .text(function(d) { return d; });\r\n    */\n    /*\r\n    \r\n        var link = d3obj.selectAll(\".link\")\r\n            .data(graph.links)\r\n            .enter()\r\n            .append(\"g\")\r\n            .attr(\"class\", \"link-group\")\r\n            .append(\"line\")\r\n            .attr(\"class\", \"link\")\r\n            .style(\"stroke-width\", function(d) { return Math.sqrt(d.stroke); });\r\n    \r\n        var node = d3obj.selectAll(\".node\")\r\n            .data(graph.nodes)\r\n            .enter().append(\"g\")\r\n            .attr(\"class\", \"node\")\r\n            .call(force.drag);\r\n        \r\n        \r\n        node.append(\"circle\")\r\n            .attr(\"class\", \"node\")\r\n            .attr(\"r\", function(d){return 13;})\r\n            .on(\"mouseover\", function(d) {\r\n                d3obj.transition()\r\n                    .duration(200)\r\n                    .style(\"opacity\", .9);\r\n                d.title = \"\";\r\n                if(d.attributes != undefined){\r\n                    d.title = JSON.stringify(d.attributes, null, 4).toString().replace(/\\,/g,'<BR>').replace(/\\[/g,'').replace(/\\]/g,'').replace(/\\{/g,'').replace(/\\}/g,'').replace(/\"/g,'');\r\n                }\r\n    \r\n                d3obj.html(\"<p><u>\" + d.name + \"</u><br/>\"  + d.title + \"<p/>\")\r\n                    .style(\"left\", (d3.event.pageX) + \"px\")\r\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\r\n            })\r\n            .on(\"mouseout\", function(d) {\r\n                d3obj.transition()\r\n                    .duration(500)\r\n                    .style(\"opacity\", 0);\r\n            })\r\n            .style(\"fill\", function(d) { return color(d.level); })\r\n            .call(force.drag);\r\n    \r\n        node.append(\"text\")\r\n            .attr(\"dx\", 14)\r\n            .attr(\"dy\", \".35em\")\r\n            .text(function(d) { return d.label});\r\n    \r\n    \r\n        force.on(\"tick\", function() {\r\n            link.attr(\"x1\", function(d) { return d.source.x; })\r\n                .attr(\"y1\", function(d) { return d.source.y; })\r\n                .attr(\"x2\", function(d) { return d.target.x; })\r\n                .attr(\"y2\", function(d) { return d.target.y; });\r\n    \r\n            node.attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\"; });\r\n    \r\n        });\r\n    */\n\n    /*\r\n    $(document).ready(function() {\r\n        var container, stats, valid;\r\n        var camera, scene, renderer, group, particle;\r\n        var mouseX = 0, mouseY = 0;\r\n        var force, nodes = [], links = [];\r\n          var part = new Image();\r\n        part.src = \"/particle.png\";\r\n        part.onload = function () {\r\n            init();\r\n            animate();\r\n        };\r\n          var w2 = document.body.clientWidth / 2;\r\n        var h2 = document.body.clientHeight / 2;\r\n          function colorize(img, r, g, b, a) {\r\n            if (!img)\r\n                return img;\r\n              var tempFileCanvas = document.createElement(\"canvas\");\r\n            tempFileCanvas.width = img.width;\r\n            tempFileCanvas.height = img.height;\r\n              var imgCtx = tempFileCanvas.getContext(\"2d\"), imgdata, i;\r\n            imgCtx.clearRect(0, 0, img.width, img.height);\r\n            imgCtx.save();\r\n            imgCtx.drawImage(img, 0, 0);\r\n              imgdata = imgCtx.getImageData(0, 0, img.width, img.height);\r\n              i = imgdata.data.length;\r\n            while ((i -= 4) > -1) {\r\n                imgdata.data[i + 3] = imgdata.data[i] * a;\r\n                if (imgdata.data[i + 3]) {\r\n                    imgdata.data[i] = r;\r\n                    imgdata.data[i + 1] = g;\r\n                    imgdata.data[i + 2] = b;\r\n                }\r\n            }\r\n              imgCtx.putImageData(imgdata, 0, 0);\r\n            imgCtx.restore();\r\n            return tempFileCanvas;\r\n        }\r\n          function init() {\r\n              //container = document.createElement('div');\r\n            container = $(\"#threeGraph\");\r\n            //document.body.appendChild(container);\r\n              camera = new THREE.PerspectiveCamera(h2 * 2, w2 / h2, 99, 101);\r\n            camera.position.z = 100;\r\n              scene = new THREE.Scene();\r\n              var group = new THREE.Object3D();\r\n              var PI2 = Math.PI * 2;\r\n            var program = function (ctx, color) {\r\n                color = d3.rgb(ctx.fillStyle);\r\n                ctx.drawImage(part, 0.5, 0.5, 1, 1);\r\n            };\r\n              var lineMaterial = new THREE.LineBasicMaterial({\r\n                color: 0xff0000,\r\n                opacity: .1\r\n            });\r\n              var particleMaterial = new THREE.PointsMaterial({\r\n                size: 0.1,\r\n                blending: THREE.AdditiveBlending, // required\r\n                depthTest: false, // required\r\n                transparent: true,\r\n                opacity: 0.7,\r\n                vertexColors: true // optional\r\n            });\r\n              /!*new THREE.ParticleCanvasMaterial( {\r\n             color: Math.random() * 0x808008 + 0x808080,\r\n             program: program\r\n             } )*!/\r\n              for (var i = 0, j; i < 500; i++) {\r\n                  var pm = particleMaterial.clone();\r\n                  pm.color = new THREE.Color();\r\n                //pm.color.setHSV(Math.random(), 1, 1);\r\n                  var c = d3.rgb(pm.color.getStyle());\r\n                pm.map = new THREE.Texture(colorize(part, c.r, c.g, c.b, 1));\r\n                  particle = new THREE.Particle(pm);\r\n                particle.position.x = (Math.random() * w2 * 4 - w2 * 2);\r\n                particle.position.y = (Math.random() * h2 * 4 - h2 * 2);\r\n                particle.position.z = 0;\r\n                particle.scale.x = particle.scale.y = Math.random();\r\n                  j = nodes.push(particle.position);\r\n                  j = links.push({source: j % 10, target: j - 1});\r\n                j = links[j - 1];\r\n                stats = new THREE.Geometry();\r\n                stats.vertices.push(new THREE.Vector3(nodes[j.source]));\r\n                stats.vertices.push(new THREE.Vector3(nodes[j.target]));\r\n                  group.add(new THREE.Line(stats, lineMaterial));\r\n                  group.add(particle);\r\n            }\r\n            scene.add(group);\r\n              renderer = new THREE.CanvasRenderer();\r\n            renderer.setSize(w2 * 2, h2 * 2);\r\n            //container.appendChild(renderer.domElement);\r\n            container.append(renderer.domElement);\r\n              d3.select(renderer.domElement)\r\n                .call(d3.behavior.zoom()\r\n                    .scaleExtent([0.01, 8])\r\n                    .scale(1)\r\n                    .translate([group.position.x, group.position.y])\r\n                    .on(\"zoom\", function () {\r\n                        group.scale.x = group.scale.y = d3.event.scale;\r\n                        //camera.position.z = d3.event.scale;\r\n                        group.position.x = -d3.event.translate[0];\r\n                        group.position.y = d3.event.translate[1];\r\n                          valid = false;\r\n                    }));\r\n              window.addEventListener('resize', onWindowResize, false);\r\n              force = d3.layout.force()\r\n                .nodes(nodes)\r\n                .links(links)\r\n                .on(\"tick\", function () {\r\n                    valid = false;\r\n                })\r\n                .start();\r\n        }\r\n          function onWindowResize() {\r\n              w2 = window.innerWidth / 2;\r\n            h2 = window.innerHeight / 2;\r\n              camera.aspect = w2 / h2;\r\n            camera.updateProjectionMatrix();\r\n              renderer.setSize(w2 * 2, h2 * 2);\r\n              valid = false;\r\n        }\r\n          function animate() {\r\n              requestAnimationFrame(animate);\r\n              if (!valid) {\r\n                valid = true;\r\n                render();\r\n            }\r\n          }\r\n          function render() {\r\n              camera.lookAt(scene.position);\r\n              renderer.render(scene, camera);\r\n          }\r\n    });\r\n    */\n};","ast":null,"map":{"version":3,"sources":["/client/threejsTest.js"],"names":[],"mappings":"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","file":"/client/threejsTest.js.map","sourcesContent":["/*(function() {\r\n// D3.layout.force3d.js\r\n// (C) 2012 ziggy.jonsson.nyc@gmail.com\r\n// BSD license (http://opensource.org/licenses/BSD-3-Clause)\r\n\r\n    d3.layout.force3d = function() {\r\n        var  forceXY = d3.layout.force()\r\n            ,forceZ = d3.layout.force()\r\n            ,zNodes = {}\r\n            ,zLinks = {}\r\n            ,nodeID = 1\r\n            ,linkID = 1\r\n            ,tickFunction = Object\r\n\r\n        var force3d = {}\r\n\r\n        Object.keys(forceXY).forEach(function(d) {\r\n            force3d[d] = function() {\r\n                var result = forceXY[d].apply(this,arguments)\r\n                if (d !=\"nodes\" && d!=\"links\")  forceZ[d].apply(this,arguments)\r\n                return (result == forceXY) ? force3d : result\r\n            }\r\n        })\r\n\r\n\r\n        force3d.on = function(name,fn) {\r\n            tickFunction = fn\r\n            return force3d\r\n        }\r\n\r\n\r\n        forceXY.on(\"tick\",function() {\r\n\r\n            // Refresh zNodes add new, delete removed\r\n            var _zNodes = {}\r\n            forceXY.nodes().forEach(function(d,i) {\r\n                if (!d.id) d.id = nodeID++\r\n                _zNodes[d.id] = zNodes[d.id] ||  {x:d.z,px:d.z,py:d.z,y:d.z,id:d.id}\r\n                d.z =  _zNodes[d.id].x\r\n            })\r\n            zNodes = _zNodes\r\n\r\n            // Refresh zLinks add new, delete removed\r\n            var _zLinks = {}\r\n            forceXY.links().forEach(function(d) {\r\n                var nytt = false\r\n                if (!d.linkID) { d.linkID = linkID++;nytt=true}\r\n                _zLinks[d.linkID] = zLinks[d.linkID]  || {target:zNodes[d.target.id],source:zNodes[d.source.id]}\r\n\r\n            })\r\n            zLinks = _zLinks\r\n\r\n            // Update the nodes/links in forceZ\r\n            forceZ.nodes(d3.values(zNodes))\r\n            forceZ.links(d3.values(zLinks))\r\n            forceZ.start() // Need to kick forceZ so we don't lose the update mechanism\r\n\r\n            // And run the user defined function, if defined\r\n            tickFunction()\r\n        })\r\n\r\n        // Expose the sub-forces for debugging purposes\r\n        force3d.xy = forceXY\r\n        force3d.z = forceZ\r\n\r\n        return force3d\r\n    }\r\n})()*/\r\nTemplate.threeTest.rendered = function () {\r\n    function getGraphData(){\r\n        nodeId = 'node-24';\r\n        //d3.json(\"miserables.json\", function(error, graph) {\r\n\r\n        //var invNodes = Inventory.find({ \"type\": \"instance\", $and: [ { \"id\": nodeId } ] });\r\n        var invNodes = Inventory.find({ \"type\": \"instance\", $and: [ { \"host\": nodeId } ] });\r\n\r\n        var edges = [];\r\n        var nodes = [];\r\n\r\n        invNodes.forEach(function(n){\r\n            nodes =  n[\"Entities\"];\r\n            edges =  n[\"Relations\"];\r\n        });\r\n        //console.log(testNodes);\r\n        //var invEdges = Inventory.find({ \"type\": \"instance\", $and: [ { \"id\": nodeId } ] }[\"Edges\"]);\r\n\r\n        //var invEdges = EdgesList.find(nodeId).fetch();\r\n        //var invNodes = NodesList.find(nodeId).fetch();\r\n        //console.log(invEdges);\r\n\r\n\r\n        /*\r\n         var edges = Edges.find().fetch();\r\n         var nodes = Nodes.find().fetch();\r\n         */\r\n\r\n        nodes.forEach(function(n){\r\n            n.name = n.label;\r\n            n.x = Math.random();\r\n            n.y = Math.random();\r\n        });\r\n        var edges_new = [];\r\n        edges.forEach(function(e) {\r\n            var sourceNode = nodes.filter(function(n) { return n.id === e.from; })[0],\r\n                targetNode = nodes.filter(function(n) { return n.id === e.to; })[0];\r\n\r\n            edges_new.push({source: sourceNode, target: targetNode, value: 1,label: e.label,attributes: e.attributes});\r\n        });\r\n\r\n        var graph = {};\r\n        graph.nodes = nodes;\r\n        graph.links = edges_new;\r\n\r\n        //console.log(graph);\r\n\r\n        return graph;\r\n    }\r\n\r\n\r\n    var graph = getGraphData();\r\n\r\n    var color = d3.scale.category20();\r\n\r\n\r\n    var WIDTH = 700, HEIGHT = 700;\r\n\r\n    var COLOR = \"#0f608b\";\r\n    var LINK_COLOR = \"#999999\";\r\n\r\n    var scene = new THREE.Scene();\r\n\r\n// set some camera attributes\r\n    var VIEW_ANGLE = 45,\r\n        ASPECT = WIDTH / HEIGHT,\r\n        NEAR = 0.1,\r\n        FAR = 10000;\r\n\r\n// get the DOM element to attach to\r\n// - assume we've got jQuery to hand\r\n    var $container = $('#threeGraph');\r\n\r\n// create a WebGL renderer, camera\r\n// and a scene\r\n    var renderer = new THREE.WebGLRenderer({alpha: true,\r\n        antialiasing: true});\r\n\r\n    renderer.setClearColor( 0x000000, 0 );\r\n\r\n    var camera =\r\n        new THREE.PerspectiveCamera(\r\n            VIEW_ANGLE,\r\n            ASPECT,\r\n            NEAR,\r\n            FAR);\r\n\r\n    var scene = new THREE.Scene();\r\n\r\n// add the camera to the scene\r\n    scene.add(camera);\r\n\r\n// the camera starts at 0,0,0\r\n// so pull it back\r\n    camera.position.z = 300;\r\n\r\n// start the renderer\r\n    renderer.setSize(WIDTH, HEIGHT);\r\n\r\n// attach the render-supplied DOM element\r\n    $container.append(renderer.domElement);\r\n\r\n    var spheres = [], three_links = [];\r\n\r\n// Define the 3d force\r\n    var force = d3.layout.force3d()\r\n        .nodes(sort_data=[])\r\n        .links(links=[])\r\n        .size([50, 50])\r\n        .gravity(0.3)\r\n        .charge(-400)\r\n\r\n    var DISTANCE = 1\r\n//    var data = graph;\r\n    var data = {\r\n        \"nodes\": [\r\n            {\r\n                \"x\": 469,\r\n                \"y\": 410\r\n            },\r\n            {\r\n                \"x\": 493,\r\n                \"y\": 364\r\n            },\r\n            {\r\n                \"x\": 442,\r\n                \"y\": 365\r\n            },\r\n            {\r\n                \"x\": 467,\r\n                \"y\": 314\r\n            },\r\n            {\r\n                \"x\": 477,\r\n                \"y\": 248\r\n            },\r\n            {\r\n                \"x\": 425,\r\n                \"y\": 207\r\n            },\r\n            {\r\n                \"x\": 402,\r\n                \"y\": 155\r\n            },\r\n            {\r\n                \"x\": 369,\r\n                \"y\": 196\r\n            },\r\n            {\r\n                \"x\": 350,\r\n                \"y\": 148\r\n            },\r\n            {\r\n                \"x\": 539,\r\n                \"y\": 222\r\n            },\r\n            {\r\n                \"x\": 594,\r\n                \"y\": 235\r\n            },\r\n            {\r\n                \"x\": 582,\r\n                \"y\": 185\r\n            },\r\n            {\r\n                \"x\": 633,\r\n                \"y\": 200\r\n            }\r\n        ],\r\n        \"links\": [\r\n            {\r\n                \"source\": 0,\r\n                \"target\": 1\r\n            },\r\n            {\r\n                \"source\": 1,\r\n                \"target\": 2\r\n            },\r\n            {\r\n                \"source\": 2,\r\n                \"target\": 0\r\n            },\r\n            {\r\n                \"source\": 1,\r\n                \"target\": 3\r\n            },\r\n            {\r\n                \"source\": 3,\r\n                \"target\": 2\r\n            },\r\n            {\r\n                \"source\": 3,\r\n                \"target\": 4\r\n            },\r\n            {\r\n                \"source\": 4,\r\n                \"target\": 5\r\n            },\r\n            {\r\n                \"source\": 5,\r\n                \"target\": 6\r\n            },\r\n            {\r\n                \"source\": 5,\r\n                \"target\": 7\r\n            },\r\n            {\r\n                \"source\": 6,\r\n                \"target\": 7\r\n            },\r\n            {\r\n                \"source\": 6,\r\n                \"target\": 8\r\n            },\r\n            {\r\n                \"source\": 7,\r\n                \"target\": 8\r\n            },\r\n            {\r\n                \"source\": 9,\r\n                \"target\": 4\r\n            },\r\n            {\r\n                \"source\": 9,\r\n                \"target\": 11\r\n            },\r\n            {\r\n                \"source\": 9,\r\n                \"target\": 10\r\n            },\r\n            {\r\n                \"source\": 10,\r\n                \"target\": 11\r\n            },\r\n            {\r\n                \"source\": 11,\r\n                \"target\": 12\r\n            },\r\n            {\r\n                \"source\": 12,\r\n                \"target\": 10\r\n            }\r\n        ]\r\n    };\r\n\r\n    for (var i = 0; i < data.nodes.length; i++) {\r\n        sort_data.push({x:data.nodes.x + DISTANCE,y:data.nodes.y + DISTANCE,z:0})\r\n\r\n        // set up the sphere vars\r\n        var radius = 5,\r\n            segments = 16,\r\n            rings = 16;\r\n\r\n        // create the sphere's material\r\n        var sphereMaterial = new THREE.MeshLambertMaterial(\r\n            {\r\n                color: COLOR\r\n            });\r\n\r\n        var sphere = new THREE.Mesh(\r\n            new THREE.SphereGeometry(\r\n                radius,\r\n                segments,\r\n                rings),\r\n            sphereMaterial);\r\n\r\n        spheres.push(sphere);\r\n\r\n        // add the sphere to the scene\r\n        scene.add(sphere);\r\n    }\r\n\r\n    for (var i = 0; i < data.links.length; i++) {\r\n        links.push({target:data.links[i].target,source:data.links[i].source});\r\n\r\n        var material = new THREE.LineBasicMaterial({ color: LINK_COLOR,\r\n            linewidth: 2});\r\n        var geometry = new THREE.Geometry();\r\n\r\n        geometry.vertices.push( new THREE.Vector3( 0, 0, 0 ) );\r\n        geometry.vertices.push( new THREE.Vector3( 0, 0, 0 ) );\r\n        var line = new THREE.Line( geometry, material );\r\n        line.userData = { source: data.links[i].source,\r\n            target: data.links[i].target };\r\n        three_links.push(line);\r\n        scene.add(line);\r\n\r\n        force.start();\r\n    }\r\n\r\n// set up the axes\r\n    var x = d3.scale.linear().domain([0, 350]).range([0, 10]),\r\n        y = d3.scale.linear().domain([0, 350]).range([0, 10]),\r\n        z = d3.scale.linear().domain([0, 350]).range([0, 10]);\r\n\r\n    force.on(\"tick\", function(e) {\r\n        for (var i = 0; i < sort_data.length; i++) {\r\n            spheres[i].position.set(x(sort_data[i].x) * 40 - 40, y(sort_data[i].y) * 40 - 40,0);\r\n\r\n            for (var j = 0; j < three_links.length; j++) {\r\n                var line = three_links[j];\r\n                var vi = -1;\r\n                if (line.userData.source === i) {\r\n                    vi = 0;\r\n                }\r\n                if (line.userData.target === i) {\r\n                    vi = 1;\r\n                }\r\n\r\n                if (vi >= 0) {\r\n                    line.geometry.vertices[vi].x = x(sort_data[i].x) * 40 - 40;\r\n                    line.geometry.vertices[vi].y = y(sort_data[i].y) * 40 - 40;\r\n                    line.geometry.verticesNeedUpdate = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        renderer.render(scene, camera);\r\n    });\r\n\r\n// create a point light\r\n    var pointLight = new THREE.PointLight( 0xFFFFFF );\r\n\r\n// set its position\r\n    pointLight.position.x = 10;\r\n    pointLight.position.y = 50;\r\n    pointLight.position.z = 130;\r\n\r\n// add to the scene\r\n    scene.add(pointLight);\r\n\r\n    var rotSpeed = 0.01;\r\n    function checkRotation(){\r\n\r\n        var x = camera.position.x,\r\n            y = camera.position.y,\r\n            z = camera.position.z;\r\n\r\n        camera.position.x = x * Math.cos(rotSpeed) - z * Math.sin(rotSpeed);\r\n        camera.position.z = z * Math.cos(rotSpeed) + x * Math.sin(rotSpeed);\r\n\r\n        camera.lookAt(scene.position);\r\n\r\n    }\r\n\r\n    function animate() {\r\n        requestAnimationFrame(animate);\r\n\r\n        checkRotation();\r\n\r\n        renderer.render(scene, camera);\r\n    }\r\n\r\n    animate();\r\n /*   var data = [4, 8, 15, 16, 23, 42];\r\n\r\n// these are, as before, to make D3's .append() and .selectAll() work\r\n    THREE.Object3D.prototype.appendChild = function (c) { this.add(c); return c; };\r\n    THREE.Object3D.prototype.querySelectorAll = function () { return []; };\r\n\r\n// this one is to use D3's .attr() on THREE's objects\r\n    THREE.Object3D.prototype.setAttribute = function (name, value) {\r\n        var chain = name.split('.');\r\n        var object = this;\r\n        for (var i = 0; i < chain.length - 1; i++) {\r\n            object = object[chain[i]];\r\n        }\r\n        object[chain[chain.length - 1]] = value;\r\n    }\r\n\r\n    var camera, scene, renderer, chart3d;\r\n\r\n    init();\r\n    animate();\r\n\r\n    function init () {\r\n        // standard THREE stuff, straight from examples\r\n        renderer = new THREE.WebGLRenderer();\r\n        renderer.setSize( window.innerWidth, window.innerHeight );\r\n        document.body.appendChild( renderer.domElement );\r\n\r\n        camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 1000 );\r\n        camera.position.z = 400;\r\n\r\n        scene = new THREE.Scene();\r\n\r\n        var light = new THREE.DirectionalLight( 0xffffff );\r\n        light.position.set( 0, 0, 1 );\r\n        scene.add( light );\r\n\r\n        var geometry = new THREE.CubeGeometry( 20, 20, 20 );\r\n        var material = new THREE.MeshLambertMaterial( {\r\n            color: 0x4682B4, shading: THREE.FlatShading, vertexColors: THREE.VertexColors } );\r\n\r\n        // create container for our 3D chart\r\n        chart3d = new THREE.Object3D();\r\n        chart3d.rotation.x = 0.6;\r\n        scene.add( chart3d );\r\n\r\n        // use D3 to set up 3D bars\r\n        d3.select( chart3d )\r\n            .selectAll()\r\n            .data(data)\r\n            .enter().append( function() { return new THREE.Mesh( geometry, material ); } )\r\n            .attr(\"position.x\", function(d, i) { return 30 * i; })\r\n            .attr(\"position.y\", function(d, i) { return d; })\r\n            .attr(\"scale.y\", function(d, i) { return d / 10; })\r\n\r\n        // continue with THREE stuff\r\n        window.addEventListener( 'resize', onWindowResize, false );\r\n    }\r\n\r\n    function onWindowResize() {\r\n\r\n        camera.aspect = window.innerWidth / window.innerHeight;\r\n        camera.updateProjectionMatrix();\r\n\r\n        renderer.setSize( window.innerWidth, window.innerHeight );\r\n\r\n    }\r\n\r\n    function animate() {\r\n\r\n        requestAnimationFrame( animate );\r\n\r\n        chart3d.rotation.y += 0.01;\r\n\r\n        renderer.render( scene, camera );\r\n\r\n    }\r\n*/\r\n\r\n\r\n/*\r\n\r\n    var d3obj = d3.select(\"#threeGraph\").append(\"svg\")\r\n        .attr(\"width\", \"100%\")\r\n        .attr(\"height\", \"100%\");\r\n\r\n    var force = d3.layout.force()\r\n        .charge(-120)\r\n        .linkDistance(30)\r\n        .size([700, 700]);\r\n\r\n    force\r\n        .nodes(graph.nodes)\r\n        .links(graph.links)\r\n        .start(10,15,20);\r\n*/\r\n\r\n\r\n    /*\r\n        var d3obj = d3.select( chart )\r\n            .selectAll()\r\n            //.data(graph.nodes)\r\n            //.enter()\r\n            .append( createDiv )\r\n            .style(\"width\", function(d) { return d * 10 + \"px\"; })\r\n            .text(function(d) { return d; });\r\n    */\r\n/*\r\n\r\n    var link = d3obj.selectAll(\".link\")\r\n        .data(graph.links)\r\n        .enter()\r\n        .append(\"g\")\r\n        .attr(\"class\", \"link-group\")\r\n        .append(\"line\")\r\n        .attr(\"class\", \"link\")\r\n        .style(\"stroke-width\", function(d) { return Math.sqrt(d.stroke); });\r\n\r\n    var node = d3obj.selectAll(\".node\")\r\n        .data(graph.nodes)\r\n        .enter().append(\"g\")\r\n        .attr(\"class\", \"node\")\r\n        .call(force.drag);\r\n    \r\n    \r\n    node.append(\"circle\")\r\n        .attr(\"class\", \"node\")\r\n        .attr(\"r\", function(d){return 13;})\r\n        .on(\"mouseover\", function(d) {\r\n            d3obj.transition()\r\n                .duration(200)\r\n                .style(\"opacity\", .9);\r\n            d.title = \"\";\r\n            if(d.attributes != undefined){\r\n                d.title = JSON.stringify(d.attributes, null, 4).toString().replace(/\\,/g,'<BR>').replace(/\\[/g,'').replace(/\\]/g,'').replace(/\\{/g,'').replace(/\\}/g,'').replace(/\"/g,'');\r\n            }\r\n\r\n            d3obj.html(\"<p><u>\" + d.name + \"</u><br/>\"  + d.title + \"<p/>\")\r\n                .style(\"left\", (d3.event.pageX) + \"px\")\r\n                .style(\"top\", (d3.event.pageY - 28) + \"px\");\r\n        })\r\n        .on(\"mouseout\", function(d) {\r\n            d3obj.transition()\r\n                .duration(500)\r\n                .style(\"opacity\", 0);\r\n        })\r\n        .style(\"fill\", function(d) { return color(d.level); })\r\n        .call(force.drag);\r\n\r\n    node.append(\"text\")\r\n        .attr(\"dx\", 14)\r\n        .attr(\"dy\", \".35em\")\r\n        .text(function(d) { return d.label});\r\n\r\n\r\n    force.on(\"tick\", function() {\r\n        link.attr(\"x1\", function(d) { return d.source.x; })\r\n            .attr(\"y1\", function(d) { return d.source.y; })\r\n            .attr(\"x2\", function(d) { return d.target.x; })\r\n            .attr(\"y2\", function(d) { return d.target.y; });\r\n\r\n        node.attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\"; });\r\n\r\n    });\r\n*/\r\n\r\n\r\n\r\n    /*\r\n    $(document).ready(function() {\r\n        var container, stats, valid;\r\n        var camera, scene, renderer, group, particle;\r\n        var mouseX = 0, mouseY = 0;\r\n        var force, nodes = [], links = [];\r\n\r\n        var part = new Image();\r\n        part.src = \"/particle.png\";\r\n        part.onload = function () {\r\n            init();\r\n            animate();\r\n        };\r\n\r\n        var w2 = document.body.clientWidth / 2;\r\n        var h2 = document.body.clientHeight / 2;\r\n\r\n        function colorize(img, r, g, b, a) {\r\n            if (!img)\r\n                return img;\r\n\r\n            var tempFileCanvas = document.createElement(\"canvas\");\r\n            tempFileCanvas.width = img.width;\r\n            tempFileCanvas.height = img.height;\r\n\r\n            var imgCtx = tempFileCanvas.getContext(\"2d\"), imgdata, i;\r\n            imgCtx.clearRect(0, 0, img.width, img.height);\r\n            imgCtx.save();\r\n            imgCtx.drawImage(img, 0, 0);\r\n\r\n            imgdata = imgCtx.getImageData(0, 0, img.width, img.height);\r\n\r\n            i = imgdata.data.length;\r\n            while ((i -= 4) > -1) {\r\n                imgdata.data[i + 3] = imgdata.data[i] * a;\r\n                if (imgdata.data[i + 3]) {\r\n                    imgdata.data[i] = r;\r\n                    imgdata.data[i + 1] = g;\r\n                    imgdata.data[i + 2] = b;\r\n                }\r\n            }\r\n\r\n            imgCtx.putImageData(imgdata, 0, 0);\r\n            imgCtx.restore();\r\n            return tempFileCanvas;\r\n        }\r\n\r\n        function init() {\r\n\r\n            //container = document.createElement('div');\r\n            container = $(\"#threeGraph\");\r\n            //document.body.appendChild(container);\r\n\r\n            camera = new THREE.PerspectiveCamera(h2 * 2, w2 / h2, 99, 101);\r\n            camera.position.z = 100;\r\n\r\n            scene = new THREE.Scene();\r\n\r\n            var group = new THREE.Object3D();\r\n\r\n            var PI2 = Math.PI * 2;\r\n            var program = function (ctx, color) {\r\n                color = d3.rgb(ctx.fillStyle);\r\n                ctx.drawImage(part, 0.5, 0.5, 1, 1);\r\n            };\r\n\r\n            var lineMaterial = new THREE.LineBasicMaterial({\r\n                color: 0xff0000,\r\n                opacity: .1\r\n            });\r\n\r\n            var particleMaterial = new THREE.PointsMaterial({\r\n                size: 0.1,\r\n                blending: THREE.AdditiveBlending, // required\r\n                depthTest: false, // required\r\n                transparent: true,\r\n                opacity: 0.7,\r\n                vertexColors: true // optional\r\n            });\r\n\r\n            /!*new THREE.ParticleCanvasMaterial( {\r\n             color: Math.random() * 0x808008 + 0x808080,\r\n             program: program\r\n             } )*!/\r\n\r\n            for (var i = 0, j; i < 500; i++) {\r\n\r\n                var pm = particleMaterial.clone();\r\n\r\n                pm.color = new THREE.Color();\r\n                //pm.color.setHSV(Math.random(), 1, 1);\r\n\r\n                var c = d3.rgb(pm.color.getStyle());\r\n                pm.map = new THREE.Texture(colorize(part, c.r, c.g, c.b, 1));\r\n\r\n                particle = new THREE.Particle(pm);\r\n                particle.position.x = (Math.random() * w2 * 4 - w2 * 2);\r\n                particle.position.y = (Math.random() * h2 * 4 - h2 * 2);\r\n                particle.position.z = 0;\r\n                particle.scale.x = particle.scale.y = Math.random();\r\n\r\n                j = nodes.push(particle.position);\r\n\r\n                j = links.push({source: j % 10, target: j - 1});\r\n                j = links[j - 1];\r\n                stats = new THREE.Geometry();\r\n                stats.vertices.push(new THREE.Vector3(nodes[j.source]));\r\n                stats.vertices.push(new THREE.Vector3(nodes[j.target]));\r\n\r\n                group.add(new THREE.Line(stats, lineMaterial));\r\n\r\n                group.add(particle);\r\n            }\r\n            scene.add(group);\r\n\r\n            renderer = new THREE.CanvasRenderer();\r\n            renderer.setSize(w2 * 2, h2 * 2);\r\n            //container.appendChild(renderer.domElement);\r\n            container.append(renderer.domElement);\r\n\r\n            d3.select(renderer.domElement)\r\n                .call(d3.behavior.zoom()\r\n                    .scaleExtent([0.01, 8])\r\n                    .scale(1)\r\n                    .translate([group.position.x, group.position.y])\r\n                    .on(\"zoom\", function () {\r\n                        group.scale.x = group.scale.y = d3.event.scale;\r\n                        //camera.position.z = d3.event.scale;\r\n                        group.position.x = -d3.event.translate[0];\r\n                        group.position.y = d3.event.translate[1];\r\n\r\n                        valid = false;\r\n                    }));\r\n\r\n            window.addEventListener('resize', onWindowResize, false);\r\n\r\n            force = d3.layout.force()\r\n                .nodes(nodes)\r\n                .links(links)\r\n                .on(\"tick\", function () {\r\n                    valid = false;\r\n                })\r\n                .start();\r\n        }\r\n\r\n        function onWindowResize() {\r\n\r\n            w2 = window.innerWidth / 2;\r\n            h2 = window.innerHeight / 2;\r\n\r\n            camera.aspect = w2 / h2;\r\n            camera.updateProjectionMatrix();\r\n\r\n            renderer.setSize(w2 * 2, h2 * 2);\r\n\r\n            valid = false;\r\n        }\r\n\r\n        function animate() {\r\n\r\n            requestAnimationFrame(animate);\r\n\r\n            if (!valid) {\r\n                valid = true;\r\n                render();\r\n            }\r\n\r\n        }\r\n\r\n        function render() {\r\n\r\n            camera.lookAt(scene.position);\r\n\r\n            renderer.render(scene, camera);\r\n\r\n        }\r\n    });\r\n*/\r\n};\r\n"]},"hash":"ab384c66e7e9a55247418f64adb6fa4a77a09060"}
