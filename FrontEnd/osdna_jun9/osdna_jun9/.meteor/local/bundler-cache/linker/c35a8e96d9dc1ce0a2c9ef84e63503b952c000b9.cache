[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar meteorInstall = Package['modules-runtime'].meteorInstall;\n\n/* Package-scope variables */\nvar Buffer, process;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"modules\":{\"client.js\":[\"./install-packages.js\",\"./stubs.js\",\"./buffer.js\",\"./process.js\",\"./css\",function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/modules/client.js                                                                                   //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nrequire(\"./install-packages.js\");                                                                               // 1\nrequire(\"./stubs.js\");                                                                                          // 2\nrequire(\"./buffer.js\");                                                                                         // 3\nrequire(\"./process.js\");                                                                                        // 4\n                                                                                                                // 5\nexports.addStyles = require(\"./css\").addStyles;                                                                 // 6\n                                                                                                                // 7\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"buffer.js\":[\"buffer\",function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/modules/buffer.js                                                                                   //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\ntry {                                                                                                           // 1\n  Buffer = global.Buffer || require(\"buffer\").Buffer;                                                           // 2\n} catch (noBuffer) {}                                                                                           // 3\n                                                                                                                // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"css.js\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/modules/css.js                                                                                      //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nvar doc = document;                                                                                             // 1\nvar head = doc.getElementsByTagName(\"head\").item(0);                                                            // 2\n                                                                                                                // 3\nexports.addStyles = function (css) {                                                                            // 4\n  var style = doc.createElement(\"style\");                                                                       // 5\n                                                                                                                // 6\n  style.setAttribute(\"type\", \"text/css\");                                                                       // 7\n                                                                                                                // 8\n  // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx                                            // 9\n  var internetExplorerSheetObject =                                                                             // 10\n    style.sheet || // Edge/IE11.                                                                                // 11\n    style.styleSheet; // Older IEs.                                                                             // 12\n                                                                                                                // 13\n  if (internetExplorerSheetObject) {                                                                            // 14\n    internetExplorerSheetObject.cssText = css;                                                                  // 15\n  } else {                                                                                                      // 16\n    style.appendChild(doc.createTextNode(css));                                                                 // 17\n  }                                                                                                             // 18\n                                                                                                                // 19\n  return head.appendChild(style);                                                                               // 20\n};                                                                                                              // 21\n                                                                                                                // 22\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"install-packages.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/modules/install-packages.js                                                                         //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nfunction install(name) {                                                                                        // 1\n  var meteorDir = {};                                                                                           // 2\n                                                                                                                // 3\n  // Given a package name <name>, install a stub module in the                                                  // 4\n  // /node_modules/meteor directory called <name>.js, so that                                                   // 5\n  // require.resolve(\"meteor/<name>\") will always return                                                        // 6\n  // /node_modules/meteor/<name>.js instead of something like                                                   // 7\n  // /node_modules/meteor/<name>/index.js, in the rare but possible event                                       // 8\n  // that the package contains a file called index.js (#6590).                                                  // 9\n  meteorDir[name + \".js\"] = function (r, e, module) {                                                           // 10\n    module.exports = Package[name];                                                                             // 11\n  };                                                                                                            // 12\n                                                                                                                // 13\n  meteorInstall({                                                                                               // 14\n    node_modules: {                                                                                             // 15\n      meteor: meteorDir                                                                                         // 16\n    }                                                                                                           // 17\n  });                                                                                                           // 18\n}                                                                                                               // 19\n                                                                                                                // 20\n// This file will be modified during computeJsOutputFilesMap to include                                         // 21\n// install(<name>) calls for every Meteor package.                                                              // 22\n                                                                                                                // 23\ninstall(\"underscore\");                                                                                          // 24\ninstall(\"meteor\");                                                                                              // 25\ninstall(\"meteor-base\");                                                                                         // 26\ninstall(\"mobile-experience\");                                                                                   // 27\ninstall(\"babel-compiler\");                                                                                      // 28\ninstall(\"ecmascript\");                                                                                          // 29\ninstall(\"base64\");                                                                                              // 30\ninstall(\"ejson\");                                                                                               // 31\ninstall(\"id-map\");                                                                                              // 32\ninstall(\"ordered-dict\");                                                                                        // 33\ninstall(\"tracker\");                                                                                             // 34\ninstall(\"modules-runtime\");                                                                                     // 35\ninstall(\"modules\");                                                                                             // 36\ninstall(\"es5-shim\");                                                                                            // 37\ninstall(\"promise\");                                                                                             // 38\ninstall(\"ecmascript-runtime\");                                                                                  // 39\ninstall(\"babel-runtime\");                                                                                       // 40\ninstall(\"random\");                                                                                              // 41\ninstall(\"mongo-id\");                                                                                            // 42\ninstall(\"diff-sequence\");                                                                                       // 43\ninstall(\"geojson-utils\");                                                                                       // 44\ninstall(\"minimongo\");                                                                                           // 45\ninstall(\"check\");                                                                                               // 46\ninstall(\"retry\");                                                                                               // 47\ninstall(\"ddp-common\");                                                                                          // 48\ninstall(\"reload\");                                                                                              // 49\ninstall(\"ddp-client\");                                                                                          // 50\ninstall(\"ddp\");                                                                                                 // 51\ninstall(\"ddp-server\");                                                                                          // 52\ninstall(\"allow-deny\");                                                                                          // 53\ninstall(\"mongo\");                                                                                               // 54\ninstall(\"blaze-html-templates\");                                                                                // 55\ninstall(\"reactive-dict\");                                                                                       // 56\ninstall(\"session\");                                                                                             // 57\ninstall(\"jquery\");                                                                                              // 58\ninstall(\"url\");                                                                                                 // 59\ninstall(\"http\");                                                                                                // 60\ninstall(\"deps\");                                                                                                // 61\ninstall(\"htmljs\");                                                                                              // 62\ninstall(\"observe-sequence\");                                                                                    // 63\ninstall(\"reactive-var\");                                                                                        // 64\ninstall(\"blaze\");                                                                                               // 65\ninstall(\"ui\");                                                                                                  // 66\ninstall(\"spacebars\");                                                                                           // 67\ninstall(\"templating\");                                                                                          // 68\ninstall(\"iron:core\");                                                                                           // 69\ninstall(\"iron:dynamic-template\");                                                                               // 70\ninstall(\"iron:layout\");                                                                                         // 71\ninstall(\"iron:url\");                                                                                            // 72\ninstall(\"iron:middleware-stack\");                                                                               // 73\ninstall(\"iron:location\");                                                                                       // 74\ninstall(\"iron:controller\");                                                                                     // 75\ninstall(\"iron:router\");                                                                                         // 76\ninstall(\"twbs:bootstrap\");                                                                                      // 77\ninstall(\"d3js:d3\");                                                                                             // 78\ninstall(\"standard-minifier-css\");                                                                               // 79\ninstall(\"standard-minifier-js\");                                                                                // 80\ninstall(\"limemakers:three\");                                                                                    // 81\ninstall(\"pcel:loading\");                                                                                        // 82\ninstall(\"spectrum:material-design-lite\");                                                                       // 83\ninstall(\"timmyg:wow\");                                                                                          // 84\ninstall(\"ddp-rate-limiter\");                                                                                    // 85\ninstall(\"localstorage\");                                                                                        // 86\ninstall(\"callback-hook\");                                                                                       // 87\ninstall(\"accounts-base\");                                                                                       // 88\ninstall(\"service-configuration\");                                                                               // 89\ninstall(\"npm-bcrypt\");                                                                                          // 90\ninstall(\"sha\");                                                                                                 // 91\ninstall(\"srp\");                                                                                                 // 92\ninstall(\"accounts-password\");                                                                                   // 93\ninstall(\"less\");                                                                                                // 94\ninstall(\"accounts-ui-unstyled\");                                                                                // 95\ninstall(\"accounts-ui\");                                                                                         // 96\ninstall(\"coffeescript\");                                                                                        // 97\ninstall(\"zimme:active-route\");                                                                                  // 98\ninstall(\"gwendall:auth-client-callbacks\");                                                                      // 99\ninstall(\"meteortoys:toykit\");                                                                                   // 100\ninstall(\"msavin:mongol\");                                                                                       // 101\ninstall(\"msavin:jetsetter\");                                                                                    // 102\ninstall(\"meteortoys:blueprint\");                                                                                // 103\ninstall(\"meteortoys:authenticate\");                                                                             // 104\ninstall(\"meteortoys:shell\");                                                                                    // 105\ninstall(\"meteortoys:method\");                                                                                   // 106\ninstall(\"meteortoys:result\");                                                                                   // 107\ninstall(\"meteortoys:autopub\");                                                                                  // 108\ninstall(\"meteortoys:pub\");                                                                                      // 109\ninstall(\"meteortoys:sub\");                                                                                      // 110\ninstall(\"meteortoys:email\");                                                                                    // 111\ninstall(\"meteortoys:listen\");                                                                                   // 112\ninstall(\"meteortoys:throttle\");                                                                                 // 113\ninstall(\"meteortoys:status\");                                                                                   // 114\ninstall(\"meteortoys:hotreload\");                                                                                // 115\ninstall(\"meteortoys:allthings\");                                                                                // 116\ninstall(\"fortawesome:fontawesome\");                                                                             // 117\ninstall(\"chrismbeckett:toastr\");                                                                                // 118\ninstall(\"stolinski:stylus-multi\");                                                                              // 119\ninstall(\"webapp\");                                                                                              // 120\ninstall(\"livedata\");                                                                                            // 121\ninstall(\"hot-code-push\");                                                                                       // 122\ninstall(\"launch-screen\");                                                                                       // 123\ninstall(\"autoupdate\");                                                                                          // 124\n                                                                                                                // 125\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"process.js\":[\"process\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/modules/process.js                                                                                  //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\ntry {                                                                                                           // 1\n  // The application can run `npm install process` to provide its own                                           // 2\n  // process stub; otherwise this module will provide a partial stub.                                           // 3\n  process = global.process || require(\"process\");                                                               // 4\n} catch (noProcess) {                                                                                           // 5\n  process = {};                                                                                                 // 6\n}                                                                                                               // 7\n                                                                                                                // 8\nif (Meteor.isServer) {                                                                                          // 9\n  // Make require(\"process\") work on the server in all versions of Node.                                        // 10\n  meteorInstall({                                                                                               // 11\n    node_modules: {                                                                                             // 12\n      \"process.js\": function (r, e, module) {                                                                   // 13\n        module.exports = process;                                                                               // 14\n      }                                                                                                         // 15\n    }                                                                                                           // 16\n  });                                                                                                           // 17\n} else {                                                                                                        // 18\n  process.platform = \"browser\";                                                                                 // 19\n  process.nextTick = process.nextTick || Meteor._setImmediate;                                                  // 20\n}                                                                                                               // 21\n                                                                                                                // 22\nif (typeof process.env !== \"object\") {                                                                          // 23\n  process.env = {};                                                                                             // 24\n}                                                                                                               // 25\n                                                                                                                // 26\n_.extend(process.env, meteorEnv);                                                                               // 27\n                                                                                                                // 28\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"stubs.js\":[\"meteor-node-stubs\",function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/modules/stubs.js                                                                                    //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\ntry {                                                                                                           // 1\n  // When meteor-node-stubs is installed in the application's root                                              // 2\n  // node_modules directory, requiring it here installs aliases for stubs                                       // 3\n  // for all Node built-in modules, such as fs, util, and http.                                                 // 4\n  require(\"meteor-node-stubs\");                                                                                 // 5\n} catch (noStubs) {}                                                                                            // 6\n                                                                                                                // 7\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"meteor-node-stubs\":{\"package.json\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// node_modules/meteor-node-stubs/package.json                                                                  //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nexports.name = \"meteor-node-stubs\";                                                                             // 1\nexports.version = \"0.2.1\";                                                                                      // 2\nexports.main = \"index.js\";                                                                                      // 3\n                                                                                                                // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"./map.json\",function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// node_modules/meteor-node-stubs/index.js                                                                      //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nvar map = require(\"./map.json\");                                                                                // 1\nvar meteorAliases = {};                                                                                         // 2\n                                                                                                                // 3\nObject.keys(map).forEach(function (id) {                                                                        // 4\n  if (typeof map[id] === \"string\") {                                                                            // 5\n    try {                                                                                                       // 6\n      exports[id] = meteorAliases[id + \".js\"] =                                                                 // 7\n        require.resolve(map[id]);                                                                               // 8\n    } catch (e) {                                                                                               // 9\n      // Resolution can fail at runtime if the stub was not included in the                                     // 10\n      // bundle because nothing depended on it.                                                                 // 11\n    }                                                                                                           // 12\n  } else {                                                                                                      // 13\n    exports[id] = map[id];                                                                                      // 14\n    meteorAliases[id + \".js\"] = function(){};                                                                   // 15\n  }                                                                                                             // 16\n});                                                                                                             // 17\n                                                                                                                // 18\nif (typeof meteorInstall === \"function\") {                                                                      // 19\n  meteorInstall({                                                                                               // 20\n    // Install the aliases into a node_modules directory one level up from                                      // 21\n    // the root directory, so that they do not clutter the namespace                                            // 22\n    // available to apps and packages.                                                                          // 23\n    \"..\": {                                                                                                     // 24\n      node_modules: meteorAliases                                                                               // 25\n    }                                                                                                           // 26\n  });                                                                                                           // 27\n}                                                                                                               // 28\n                                                                                                                // 29\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"map.json\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// node_modules/meteor-node-stubs/map.json                                                                      //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nmodule.exports = {                                                                                              // 1\n  \"assert\": \"assert/\",                                                                                          // 2\n  \"buffer\": \"buffer/\",                                                                                          // 3\n  \"child_process\": null,                                                                                        // 4\n  \"cluster\": null,                                                                                              // 5\n  \"console\": \"console-browserify\",                                                                              // 6\n  \"constants\": \"constants-browserify\",                                                                          // 7\n  \"crypto\": \"crypto-browserify\",                                                                                // 8\n  \"dgram\": null,                                                                                                // 9\n  \"dns\": null,                                                                                                  // 10\n  \"domain\": \"domain-browser\",                                                                                   // 11\n  \"events\": \"events/\",                                                                                          // 12\n  \"fs\": null,                                                                                                   // 13\n  \"http\": \"http-browserify\",                                                                                    // 14\n  \"https\": \"https-browserify\",                                                                                  // 15\n  \"module\": null,                                                                                               // 16\n  \"net\": null,                                                                                                  // 17\n  \"os\": \"os-browserify/browser.js\",                                                                             // 18\n  \"path\": \"path-browserify\",                                                                                    // 19\n  \"process\": \"process/browser.js\",                                                                              // 20\n  \"punycode\": \"punycode/\",                                                                                      // 21\n  \"querystring\": \"querystring-es3/\",                                                                            // 22\n  \"readline\": null,                                                                                             // 23\n  \"repl\": null,                                                                                                 // 24\n  \"stream\": \"stream-browserify\",                                                                                // 25\n  \"_stream_duplex\": \"readable-stream/duplex.js\",                                                                // 26\n  \"_stream_passthrough\": \"readable-stream/passthrough.js\",                                                      // 27\n  \"_stream_readable\": \"readable-stream/readable.js\",                                                            // 28\n  \"_stream_transform\": \"readable-stream/transform.js\",                                                          // 29\n  \"_stream_writable\": \"readable-stream/writable.js\",                                                            // 30\n  \"string_decoder\": \"string_decoder/\",                                                                          // 31\n  \"sys\": \"util/util.js\",                                                                                        // 32\n  \"timers\": \"timers-browserify\",                                                                                // 33\n  \"tls\": null,                                                                                                  // 34\n  \"tty\": \"tty-browserify\",                                                                                      // 35\n  \"url\": \"url/\",                                                                                                // 36\n  \"util\": \"util/util.js\",                                                                                       // 37\n  \"vm\": \"vm-browserify\",                                                                                        // 38\n  \"zlib\": \"browserify-zlib\"                                                                                     // 39\n};                                                                                                              // 40\n                                                                                                                // 41\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"deps\":{\"buffer.js\":[\"buffer/\",function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// node_modules/meteor-node-stubs/deps/buffer.js                                                                //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nrequire(\"buffer/\");                                                                                             // 1\n                                                                                                                // 2\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"process.js\":[\"process/browser.js\",function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// node_modules/meteor-node-stubs/deps/process.js                                                               //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nrequire(\"process/browser.js\");                                                                                  // 1\n                                                                                                                // 2\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"domain.js\":[\"domain-browser\",function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// node_modules/meteor-node-stubs/deps/domain.js                                                                //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nrequire(\"domain-browser\");                                                                                      // 1\n                                                                                                                // 2\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"node_modules\":{\"buffer\":{\"package.json\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// node_modules/meteor-node-stubs/node_modules/buffer/package.json                                              //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nexports.name = \"buffer\";                                                                                        // 1\nexports.version = \"4.5.0\";                                                                                      // 2\nexports.main = \"index.js\";                                                                                      // 3\n                                                                                                                // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"base64-js\",\"ieee754\",\"isarray\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// node_modules/meteor-node-stubs/node_modules/buffer/index.js                                                  //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n/*!                                                                                                             // 1\n * The buffer module from node.js, for the browser.                                                             // 2\n *                                                                                                              // 3\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>                                        // 4\n * @license  MIT                                                                                                // 5\n */                                                                                                             // 6\n/* eslint-disable no-proto */                                                                                   // 7\n                                                                                                                // 8\n'use strict'                                                                                                    // 9\n                                                                                                                // 10\nvar base64 = require('base64-js')                                                                               // 11\nvar ieee754 = require('ieee754')                                                                                // 12\nvar isArray = require('isarray')                                                                                // 13\n                                                                                                                // 14\nexports.Buffer = Buffer                                                                                         // 15\nexports.SlowBuffer = SlowBuffer                                                                                 // 16\nexports.INSPECT_MAX_BYTES = 50                                                                                  // 17\nBuffer.poolSize = 8192 // not used by this implementation                                                       // 18\n                                                                                                                // 19\nvar rootParent = {}                                                                                             // 20\n                                                                                                                // 21\n/**                                                                                                             // 22\n * If `Buffer.TYPED_ARRAY_SUPPORT`:                                                                             // 23\n *   === true    Use Uint8Array implementation (fastest)                                                        // 24\n *   === false   Use Object implementation (most compatible, even IE6)                                          // 25\n *                                                                                                              // 26\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,                           // 27\n * Opera 11.6+, iOS 4.2+.                                                                                       // 28\n *                                                                                                              // 29\n * Due to various browser bugs, sometimes the Object implementation will be used even                           // 30\n * when the browser supports typed arrays.                                                                      // 31\n *                                                                                                              // 32\n * Note:                                                                                                        // 33\n *                                                                                                              // 34\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,                          // 35\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.                                                // 36\n *                                                                                                              // 37\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.                                     // 38\n *                                                                                                              // 39\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of                       // 40\n *     incorrect length in some situations.                                                                     // 41\n                                                                                                                // 42\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they                       // 43\n * get the Object implementation, which is slower but behaves correctly.                                        // 44\n */                                                                                                             // 45\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined                                           // 46\n  ? global.TYPED_ARRAY_SUPPORT                                                                                  // 47\n  : typedArraySupport()                                                                                         // 48\n                                                                                                                // 49\nfunction typedArraySupport () {                                                                                 // 50\n  try {                                                                                                         // 51\n    var arr = new Uint8Array(1)                                                                                 // 52\n    arr.foo = function () { return 42 }                                                                         // 53\n    return arr.foo() === 42 && // typed array instances can be augmented                                        // 54\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`                                    // 55\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`                                       // 56\n  } catch (e) {                                                                                                 // 57\n    return false                                                                                                // 58\n  }                                                                                                             // 59\n}                                                                                                               // 60\n                                                                                                                // 61\nfunction kMaxLength () {                                                                                        // 62\n  return Buffer.TYPED_ARRAY_SUPPORT                                                                             // 63\n    ? 0x7fffffff                                                                                                // 64\n    : 0x3fffffff                                                                                                // 65\n}                                                                                                               // 66\n                                                                                                                // 67\n/**                                                                                                             // 68\n * The Buffer constructor returns instances of `Uint8Array` that have their                                     // 69\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of                              // 70\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods                              // 71\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it                                // 72\n * returns a single octet.                                                                                      // 73\n *                                                                                                              // 74\n * The `Uint8Array` prototype remains unmodified.                                                               // 75\n */                                                                                                             // 76\nfunction Buffer (arg) {                                                                                         // 77\n  if (!(this instanceof Buffer)) {                                                                              // 78\n    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.                                    // 79\n    if (arguments.length > 1) return new Buffer(arg, arguments[1])                                              // 80\n    return new Buffer(arg)                                                                                      // 81\n  }                                                                                                             // 82\n                                                                                                                // 83\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {                                                                            // 84\n    this.length = 0                                                                                             // 85\n    this.parent = undefined                                                                                     // 86\n  }                                                                                                             // 87\n                                                                                                                // 88\n  // Common case.                                                                                               // 89\n  if (typeof arg === 'number') {                                                                                // 90\n    return fromNumber(this, arg)                                                                                // 91\n  }                                                                                                             // 92\n                                                                                                                // 93\n  // Slightly less common case.                                                                                 // 94\n  if (typeof arg === 'string') {                                                                                // 95\n    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')                                  // 96\n  }                                                                                                             // 97\n                                                                                                                // 98\n  // Unusual.                                                                                                   // 99\n  return fromObject(this, arg)                                                                                  // 100\n}                                                                                                               // 101\n                                                                                                                // 102\n// TODO: Legacy, not needed anymore. Remove in next major version.                                              // 103\nBuffer._augment = function (arr) {                                                                              // 104\n  arr.__proto__ = Buffer.prototype                                                                              // 105\n  return arr                                                                                                    // 106\n}                                                                                                               // 107\n                                                                                                                // 108\nfunction fromNumber (that, length) {                                                                            // 109\n  that = allocate(that, length < 0 ? 0 : checked(length) | 0)                                                   // 110\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {                                                                            // 111\n    for (var i = 0; i < length; i++) {                                                                          // 112\n      that[i] = 0                                                                                               // 113\n    }                                                                                                           // 114\n  }                                                                                                             // 115\n  return that                                                                                                   // 116\n}                                                                                                               // 117\n                                                                                                                // 118\nfunction fromString (that, string, encoding) {                                                                  // 119\n  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'                                        // 120\n                                                                                                                // 121\n  // Assumption: byteLength() return value is always < kMaxLength.                                              // 122\n  var length = byteLength(string, encoding) | 0                                                                 // 123\n  that = allocate(that, length)                                                                                 // 124\n                                                                                                                // 125\n  that.write(string, encoding)                                                                                  // 126\n  return that                                                                                                   // 127\n}                                                                                                               // 128\n                                                                                                                // 129\nfunction fromObject (that, object) {                                                                            // 130\n  if (Buffer.isBuffer(object)) return fromBuffer(that, object)                                                  // 131\n                                                                                                                // 132\n  if (isArray(object)) return fromArray(that, object)                                                           // 133\n                                                                                                                // 134\n  if (object == null) {                                                                                         // 135\n    throw new TypeError('must start with number, buffer, array or string')                                      // 136\n  }                                                                                                             // 137\n                                                                                                                // 138\n  if (typeof ArrayBuffer !== 'undefined') {                                                                     // 139\n    if (object.buffer instanceof ArrayBuffer) {                                                                 // 140\n      return fromTypedArray(that, object)                                                                       // 141\n    }                                                                                                           // 142\n    if (object instanceof ArrayBuffer) {                                                                        // 143\n      return fromArrayBuffer(that, object)                                                                      // 144\n    }                                                                                                           // 145\n  }                                                                                                             // 146\n                                                                                                                // 147\n  if (object.length) return fromArrayLike(that, object)                                                         // 148\n                                                                                                                // 149\n  return fromJsonObject(that, object)                                                                           // 150\n}                                                                                                               // 151\n                                                                                                                // 152\nfunction fromBuffer (that, buffer) {                                                                            // 153\n  var length = checked(buffer.length) | 0                                                                       // 154\n  that = allocate(that, length)                                                                                 // 155\n  buffer.copy(that, 0, 0, length)                                                                               // 156\n  return that                                                                                                   // 157\n}                                                                                                               // 158\n                                                                                                                // 159\nfunction fromArray (that, array) {                                                                              // 160\n  var length = checked(array.length) | 0                                                                        // 161\n  that = allocate(that, length)                                                                                 // 162\n  for (var i = 0; i < length; i += 1) {                                                                         // 163\n    that[i] = array[i] & 255                                                                                    // 164\n  }                                                                                                             // 165\n  return that                                                                                                   // 166\n}                                                                                                               // 167\n                                                                                                                // 168\n// Duplicate of fromArray() to keep fromArray() monomorphic.                                                    // 169\nfunction fromTypedArray (that, array) {                                                                         // 170\n  var length = checked(array.length) | 0                                                                        // 171\n  that = allocate(that, length)                                                                                 // 172\n  // Truncating the elements is probably not what people expect from typed                                      // 173\n  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior                                    // 174\n  // of the old Buffer constructor.                                                                             // 175\n  for (var i = 0; i < length; i += 1) {                                                                         // 176\n    that[i] = array[i] & 255                                                                                    // 177\n  }                                                                                                             // 178\n  return that                                                                                                   // 179\n}                                                                                                               // 180\n                                                                                                                // 181\nfunction fromArrayBuffer (that, array) {                                                                        // 182\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer                                         // 183\n                                                                                                                // 184\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                             // 185\n    // Return an augmented `Uint8Array` instance, for best performance                                          // 186\n    that = new Uint8Array(array)                                                                                // 187\n    that.__proto__ = Buffer.prototype                                                                           // 188\n  } else {                                                                                                      // 189\n    // Fallback: Return an object instance of the Buffer class                                                  // 190\n    that = fromTypedArray(that, new Uint8Array(array))                                                          // 191\n  }                                                                                                             // 192\n  return that                                                                                                   // 193\n}                                                                                                               // 194\n                                                                                                                // 195\nfunction fromArrayLike (that, array) {                                                                          // 196\n  var length = checked(array.length) | 0                                                                        // 197\n  that = allocate(that, length)                                                                                 // 198\n  for (var i = 0; i < length; i += 1) {                                                                         // 199\n    that[i] = array[i] & 255                                                                                    // 200\n  }                                                                                                             // 201\n  return that                                                                                                   // 202\n}                                                                                                               // 203\n                                                                                                                // 204\n// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.                                      // 205\n// Returns a zero-length buffer for inputs that don't conform to the spec.                                      // 206\nfunction fromJsonObject (that, object) {                                                                        // 207\n  var array                                                                                                     // 208\n  var length = 0                                                                                                // 209\n                                                                                                                // 210\n  if (object.type === 'Buffer' && isArray(object.data)) {                                                       // 211\n    array = object.data                                                                                         // 212\n    length = checked(array.length) | 0                                                                          // 213\n  }                                                                                                             // 214\n  that = allocate(that, length)                                                                                 // 215\n                                                                                                                // 216\n  for (var i = 0; i < length; i += 1) {                                                                         // 217\n    that[i] = array[i] & 255                                                                                    // 218\n  }                                                                                                             // 219\n  return that                                                                                                   // 220\n}                                                                                                               // 221\n                                                                                                                // 222\nif (Buffer.TYPED_ARRAY_SUPPORT) {                                                                               // 223\n  Buffer.prototype.__proto__ = Uint8Array.prototype                                                             // 224\n  Buffer.__proto__ = Uint8Array                                                                                 // 225\n  if (typeof Symbol !== 'undefined' && Symbol.species &&                                                        // 226\n      Buffer[Symbol.species] === Buffer) {                                                                      // 227\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97                                  // 228\n    Object.defineProperty(Buffer, Symbol.species, {                                                             // 229\n      value: null,                                                                                              // 230\n      configurable: true                                                                                        // 231\n    })                                                                                                          // 232\n  }                                                                                                             // 233\n} else {                                                                                                        // 234\n  // pre-set for values that may exist in the future                                                            // 235\n  Buffer.prototype.length = undefined                                                                           // 236\n  Buffer.prototype.parent = undefined                                                                           // 237\n}                                                                                                               // 238\n                                                                                                                // 239\nfunction allocate (that, length) {                                                                              // 240\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                             // 241\n    // Return an augmented `Uint8Array` instance, for best performance                                          // 242\n    that = new Uint8Array(length)                                                                               // 243\n    that.__proto__ = Buffer.prototype                                                                           // 244\n  } else {                                                                                                      // 245\n    // Fallback: Return an object instance of the Buffer class                                                  // 246\n    that.length = length                                                                                        // 247\n  }                                                                                                             // 248\n                                                                                                                // 249\n  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1                                                // 250\n  if (fromPool) that.parent = rootParent                                                                        // 251\n                                                                                                                // 252\n  return that                                                                                                   // 253\n}                                                                                                               // 254\n                                                                                                                // 255\nfunction checked (length) {                                                                                     // 256\n  // Note: cannot use `length < kMaxLength` here because that fails when                                        // 257\n  // length is NaN (which is otherwise coerced to zero.)                                                        // 258\n  if (length >= kMaxLength()) {                                                                                 // 259\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +                                    // 260\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')                                     // 261\n  }                                                                                                             // 262\n  return length | 0                                                                                             // 263\n}                                                                                                               // 264\n                                                                                                                // 265\nfunction SlowBuffer (subject, encoding) {                                                                       // 266\n  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)                                   // 267\n                                                                                                                // 268\n  var buf = new Buffer(subject, encoding)                                                                       // 269\n  delete buf.parent                                                                                             // 270\n  return buf                                                                                                    // 271\n}                                                                                                               // 272\n                                                                                                                // 273\nBuffer.isBuffer = function isBuffer (b) {                                                                       // 274\n  return !!(b != null && b._isBuffer)                                                                           // 275\n}                                                                                                               // 276\n                                                                                                                // 277\nBuffer.compare = function compare (a, b) {                                                                      // 278\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {                                                             // 279\n    throw new TypeError('Arguments must be Buffers')                                                            // 280\n  }                                                                                                             // 281\n                                                                                                                // 282\n  if (a === b) return 0                                                                                         // 283\n                                                                                                                // 284\n  var x = a.length                                                                                              // 285\n  var y = b.length                                                                                              // 286\n                                                                                                                // 287\n  var i = 0                                                                                                     // 288\n  var len = Math.min(x, y)                                                                                      // 289\n  while (i < len) {                                                                                             // 290\n    if (a[i] !== b[i]) break                                                                                    // 291\n                                                                                                                // 292\n    ++i                                                                                                         // 293\n  }                                                                                                             // 294\n                                                                                                                // 295\n  if (i !== len) {                                                                                              // 296\n    x = a[i]                                                                                                    // 297\n    y = b[i]                                                                                                    // 298\n  }                                                                                                             // 299\n                                                                                                                // 300\n  if (x < y) return -1                                                                                          // 301\n  if (y < x) return 1                                                                                           // 302\n  return 0                                                                                                      // 303\n}                                                                                                               // 304\n                                                                                                                // 305\nBuffer.isEncoding = function isEncoding (encoding) {                                                            // 306\n  switch (String(encoding).toLowerCase()) {                                                                     // 307\n    case 'hex':                                                                                                 // 308\n    case 'utf8':                                                                                                // 309\n    case 'utf-8':                                                                                               // 310\n    case 'ascii':                                                                                               // 311\n    case 'binary':                                                                                              // 312\n    case 'base64':                                                                                              // 313\n    case 'raw':                                                                                                 // 314\n    case 'ucs2':                                                                                                // 315\n    case 'ucs-2':                                                                                               // 316\n    case 'utf16le':                                                                                             // 317\n    case 'utf-16le':                                                                                            // 318\n      return true                                                                                               // 319\n    default:                                                                                                    // 320\n      return false                                                                                              // 321\n  }                                                                                                             // 322\n}                                                                                                               // 323\n                                                                                                                // 324\nBuffer.concat = function concat (list, length) {                                                                // 325\n  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')                         // 326\n                                                                                                                // 327\n  if (list.length === 0) {                                                                                      // 328\n    return new Buffer(0)                                                                                        // 329\n  }                                                                                                             // 330\n                                                                                                                // 331\n  var i                                                                                                         // 332\n  if (length === undefined) {                                                                                   // 333\n    length = 0                                                                                                  // 334\n    for (i = 0; i < list.length; i++) {                                                                         // 335\n      length += list[i].length                                                                                  // 336\n    }                                                                                                           // 337\n  }                                                                                                             // 338\n                                                                                                                // 339\n  var buf = new Buffer(length)                                                                                  // 340\n  var pos = 0                                                                                                   // 341\n  for (i = 0; i < list.length; i++) {                                                                           // 342\n    var item = list[i]                                                                                          // 343\n    item.copy(buf, pos)                                                                                         // 344\n    pos += item.length                                                                                          // 345\n  }                                                                                                             // 346\n  return buf                                                                                                    // 347\n}                                                                                                               // 348\n                                                                                                                // 349\nfunction byteLength (string, encoding) {                                                                        // 350\n  if (typeof string !== 'string') string = '' + string                                                          // 351\n                                                                                                                // 352\n  var len = string.length                                                                                       // 353\n  if (len === 0) return 0                                                                                       // 354\n                                                                                                                // 355\n  // Use a for loop to avoid recursion                                                                          // 356\n  var loweredCase = false                                                                                       // 357\n  for (;;) {                                                                                                    // 358\n    switch (encoding) {                                                                                         // 359\n      case 'ascii':                                                                                             // 360\n      case 'binary':                                                                                            // 361\n      // Deprecated                                                                                             // 362\n      case 'raw':                                                                                               // 363\n      case 'raws':                                                                                              // 364\n        return len                                                                                              // 365\n      case 'utf8':                                                                                              // 366\n      case 'utf-8':                                                                                             // 367\n        return utf8ToBytes(string).length                                                                       // 368\n      case 'ucs2':                                                                                              // 369\n      case 'ucs-2':                                                                                             // 370\n      case 'utf16le':                                                                                           // 371\n      case 'utf-16le':                                                                                          // 372\n        return len * 2                                                                                          // 373\n      case 'hex':                                                                                               // 374\n        return len >>> 1                                                                                        // 375\n      case 'base64':                                                                                            // 376\n        return base64ToBytes(string).length                                                                     // 377\n      default:                                                                                                  // 378\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8                                       // 379\n        encoding = ('' + encoding).toLowerCase()                                                                // 380\n        loweredCase = true                                                                                      // 381\n    }                                                                                                           // 382\n  }                                                                                                             // 383\n}                                                                                                               // 384\nBuffer.byteLength = byteLength                                                                                  // 385\n                                                                                                                // 386\nfunction slowToString (encoding, start, end) {                                                                  // 387\n  var loweredCase = false                                                                                       // 388\n                                                                                                                // 389\n  start = start | 0                                                                                             // 390\n  end = end === undefined || end === Infinity ? this.length : end | 0                                           // 391\n                                                                                                                // 392\n  if (!encoding) encoding = 'utf8'                                                                              // 393\n  if (start < 0) start = 0                                                                                      // 394\n  if (end > this.length) end = this.length                                                                      // 395\n  if (end <= start) return ''                                                                                   // 396\n                                                                                                                // 397\n  while (true) {                                                                                                // 398\n    switch (encoding) {                                                                                         // 399\n      case 'hex':                                                                                               // 400\n        return hexSlice(this, start, end)                                                                       // 401\n                                                                                                                // 402\n      case 'utf8':                                                                                              // 403\n      case 'utf-8':                                                                                             // 404\n        return utf8Slice(this, start, end)                                                                      // 405\n                                                                                                                // 406\n      case 'ascii':                                                                                             // 407\n        return asciiSlice(this, start, end)                                                                     // 408\n                                                                                                                // 409\n      case 'binary':                                                                                            // 410\n        return binarySlice(this, start, end)                                                                    // 411\n                                                                                                                // 412\n      case 'base64':                                                                                            // 413\n        return base64Slice(this, start, end)                                                                    // 414\n                                                                                                                // 415\n      case 'ucs2':                                                                                              // 416\n      case 'ucs-2':                                                                                             // 417\n      case 'utf16le':                                                                                           // 418\n      case 'utf-16le':                                                                                          // 419\n        return utf16leSlice(this, start, end)                                                                   // 420\n                                                                                                                // 421\n      default:                                                                                                  // 422\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                   // 423\n        encoding = (encoding + '').toLowerCase()                                                                // 424\n        loweredCase = true                                                                                      // 425\n    }                                                                                                           // 426\n  }                                                                                                             // 427\n}                                                                                                               // 428\n                                                                                                                // 429\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect                          // 430\n// Buffer instances.                                                                                            // 431\nBuffer.prototype._isBuffer = true                                                                               // 432\n                                                                                                                // 433\nBuffer.prototype.toString = function toString () {                                                              // 434\n  var length = this.length | 0                                                                                  // 435\n  if (length === 0) return ''                                                                                   // 436\n  if (arguments.length === 0) return utf8Slice(this, 0, length)                                                 // 437\n  return slowToString.apply(this, arguments)                                                                    // 438\n}                                                                                                               // 439\n                                                                                                                // 440\nBuffer.prototype.equals = function equals (b) {                                                                 // 441\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                     // 442\n  if (this === b) return true                                                                                   // 443\n  return Buffer.compare(this, b) === 0                                                                          // 444\n}                                                                                                               // 445\n                                                                                                                // 446\nBuffer.prototype.inspect = function inspect () {                                                                // 447\n  var str = ''                                                                                                  // 448\n  var max = exports.INSPECT_MAX_BYTES                                                                           // 449\n  if (this.length > 0) {                                                                                        // 450\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')                                                 // 451\n    if (this.length > max) str += ' ... '                                                                       // 452\n  }                                                                                                             // 453\n  return '<Buffer ' + str + '>'                                                                                 // 454\n}                                                                                                               // 455\n                                                                                                                // 456\nBuffer.prototype.compare = function compare (b) {                                                               // 457\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                     // 458\n  if (this === b) return 0                                                                                      // 459\n  return Buffer.compare(this, b)                                                                                // 460\n}                                                                                                               // 461\n                                                                                                                // 462\nBuffer.prototype.indexOf = function indexOf (val, byteOffset) {                                                 // 463\n  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff                                                          // 464\n  else if (byteOffset < -0x80000000) byteOffset = -0x80000000                                                   // 465\n  byteOffset >>= 0                                                                                              // 466\n                                                                                                                // 467\n  if (this.length === 0) return -1                                                                              // 468\n  if (byteOffset >= this.length) return -1                                                                      // 469\n                                                                                                                // 470\n  // Negative offsets start from the end of the buffer                                                          // 471\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)                                        // 472\n                                                                                                                // 473\n  if (typeof val === 'string') {                                                                                // 474\n    if (val.length === 0) return -1 // special case: looking for empty string always fails                      // 475\n    return String.prototype.indexOf.call(this, val, byteOffset)                                                 // 476\n  }                                                                                                             // 477\n  if (Buffer.isBuffer(val)) {                                                                                   // 478\n    return arrayIndexOf(this, val, byteOffset)                                                                  // 479\n  }                                                                                                             // 480\n  if (typeof val === 'number') {                                                                                // 481\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {                            // 482\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)                                           // 483\n    }                                                                                                           // 484\n    return arrayIndexOf(this, [ val ], byteOffset)                                                              // 485\n  }                                                                                                             // 486\n                                                                                                                // 487\n  function arrayIndexOf (arr, val, byteOffset) {                                                                // 488\n    var foundIndex = -1                                                                                         // 489\n    for (var i = 0; byteOffset + i < arr.length; i++) {                                                         // 490\n      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {                                // 491\n        if (foundIndex === -1) foundIndex = i                                                                   // 492\n        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex                                   // 493\n      } else {                                                                                                  // 494\n        foundIndex = -1                                                                                         // 495\n      }                                                                                                         // 496\n    }                                                                                                           // 497\n    return -1                                                                                                   // 498\n  }                                                                                                             // 499\n                                                                                                                // 500\n  throw new TypeError('val must be string, number or Buffer')                                                   // 501\n}                                                                                                               // 502\n                                                                                                                // 503\nfunction hexWrite (buf, string, offset, length) {                                                               // 504\n  offset = Number(offset) || 0                                                                                  // 505\n  var remaining = buf.length - offset                                                                           // 506\n  if (!length) {                                                                                                // 507\n    length = remaining                                                                                          // 508\n  } else {                                                                                                      // 509\n    length = Number(length)                                                                                     // 510\n    if (length > remaining) {                                                                                   // 511\n      length = remaining                                                                                        // 512\n    }                                                                                                           // 513\n  }                                                                                                             // 514\n                                                                                                                // 515\n  // must be an even number of digits                                                                           // 516\n  var strLen = string.length                                                                                    // 517\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')                                                   // 518\n                                                                                                                // 519\n  if (length > strLen / 2) {                                                                                    // 520\n    length = strLen / 2                                                                                         // 521\n  }                                                                                                             // 522\n  for (var i = 0; i < length; i++) {                                                                            // 523\n    var parsed = parseInt(string.substr(i * 2, 2), 16)                                                          // 524\n    if (isNaN(parsed)) throw new Error('Invalid hex string')                                                    // 525\n    buf[offset + i] = parsed                                                                                    // 526\n  }                                                                                                             // 527\n  return i                                                                                                      // 528\n}                                                                                                               // 529\n                                                                                                                // 530\nfunction utf8Write (buf, string, offset, length) {                                                              // 531\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)                              // 532\n}                                                                                                               // 533\n                                                                                                                // 534\nfunction asciiWrite (buf, string, offset, length) {                                                             // 535\n  return blitBuffer(asciiToBytes(string), buf, offset, length)                                                  // 536\n}                                                                                                               // 537\n                                                                                                                // 538\nfunction binaryWrite (buf, string, offset, length) {                                                            // 539\n  return asciiWrite(buf, string, offset, length)                                                                // 540\n}                                                                                                               // 541\n                                                                                                                // 542\nfunction base64Write (buf, string, offset, length) {                                                            // 543\n  return blitBuffer(base64ToBytes(string), buf, offset, length)                                                 // 544\n}                                                                                                               // 545\n                                                                                                                // 546\nfunction ucs2Write (buf, string, offset, length) {                                                              // 547\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)                           // 548\n}                                                                                                               // 549\n                                                                                                                // 550\nBuffer.prototype.write = function write (string, offset, length, encoding) {                                    // 551\n  // Buffer#write(string)                                                                                       // 552\n  if (offset === undefined) {                                                                                   // 553\n    encoding = 'utf8'                                                                                           // 554\n    length = this.length                                                                                        // 555\n    offset = 0                                                                                                  // 556\n  // Buffer#write(string, encoding)                                                                             // 557\n  } else if (length === undefined && typeof offset === 'string') {                                              // 558\n    encoding = offset                                                                                           // 559\n    length = this.length                                                                                        // 560\n    offset = 0                                                                                                  // 561\n  // Buffer#write(string, offset[, length][, encoding])                                                         // 562\n  } else if (isFinite(offset)) {                                                                                // 563\n    offset = offset | 0                                                                                         // 564\n    if (isFinite(length)) {                                                                                     // 565\n      length = length | 0                                                                                       // 566\n      if (encoding === undefined) encoding = 'utf8'                                                             // 567\n    } else {                                                                                                    // 568\n      encoding = length                                                                                         // 569\n      length = undefined                                                                                        // 570\n    }                                                                                                           // 571\n  // legacy write(string, encoding, offset, length) - remove in v0.13                                           // 572\n  } else {                                                                                                      // 573\n    var swap = encoding                                                                                         // 574\n    encoding = offset                                                                                           // 575\n    offset = length | 0                                                                                         // 576\n    length = swap                                                                                               // 577\n  }                                                                                                             // 578\n                                                                                                                // 579\n  var remaining = this.length - offset                                                                          // 580\n  if (length === undefined || length > remaining) length = remaining                                            // 581\n                                                                                                                // 582\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {                              // 583\n    throw new RangeError('attempt to write outside buffer bounds')                                              // 584\n  }                                                                                                             // 585\n                                                                                                                // 586\n  if (!encoding) encoding = 'utf8'                                                                              // 587\n                                                                                                                // 588\n  var loweredCase = false                                                                                       // 589\n  for (;;) {                                                                                                    // 590\n    switch (encoding) {                                                                                         // 591\n      case 'hex':                                                                                               // 592\n        return hexWrite(this, string, offset, length)                                                           // 593\n                                                                                                                // 594\n      case 'utf8':                                                                                              // 595\n      case 'utf-8':                                                                                             // 596\n        return utf8Write(this, string, offset, length)                                                          // 597\n                                                                                                                // 598\n      case 'ascii':                                                                                             // 599\n        return asciiWrite(this, string, offset, length)                                                         // 600\n                                                                                                                // 601\n      case 'binary':                                                                                            // 602\n        return binaryWrite(this, string, offset, length)                                                        // 603\n                                                                                                                // 604\n      case 'base64':                                                                                            // 605\n        // Warning: maxLength not taken into account in base64Write                                             // 606\n        return base64Write(this, string, offset, length)                                                        // 607\n                                                                                                                // 608\n      case 'ucs2':                                                                                              // 609\n      case 'ucs-2':                                                                                             // 610\n      case 'utf16le':                                                                                           // 611\n      case 'utf-16le':                                                                                          // 612\n        return ucs2Write(this, string, offset, length)                                                          // 613\n                                                                                                                // 614\n      default:                                                                                                  // 615\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                   // 616\n        encoding = ('' + encoding).toLowerCase()                                                                // 617\n        loweredCase = true                                                                                      // 618\n    }                                                                                                           // 619\n  }                                                                                                             // 620\n}                                                                                                               // 621\n                                                                                                                // 622\nBuffer.prototype.toJSON = function toJSON () {                                                                  // 623\n  return {                                                                                                      // 624\n    type: 'Buffer',                                                                                             // 625\n    data: Array.prototype.slice.call(this._arr || this, 0)                                                      // 626\n  }                                                                                                             // 627\n}                                                                                                               // 628\n                                                                                                                // 629\nfunction base64Slice (buf, start, end) {                                                                        // 630\n  if (start === 0 && end === buf.length) {                                                                      // 631\n    return base64.fromByteArray(buf)                                                                            // 632\n  } else {                                                                                                      // 633\n    return base64.fromByteArray(buf.slice(start, end))                                                          // 634\n  }                                                                                                             // 635\n}                                                                                                               // 636\n                                                                                                                // 637\nfunction utf8Slice (buf, start, end) {                                                                          // 638\n  end = Math.min(buf.length, end)                                                                               // 639\n  var res = []                                                                                                  // 640\n                                                                                                                // 641\n  var i = start                                                                                                 // 642\n  while (i < end) {                                                                                             // 643\n    var firstByte = buf[i]                                                                                      // 644\n    var codePoint = null                                                                                        // 645\n    var bytesPerSequence = (firstByte > 0xEF) ? 4                                                               // 646\n      : (firstByte > 0xDF) ? 3                                                                                  // 647\n      : (firstByte > 0xBF) ? 2                                                                                  // 648\n      : 1                                                                                                       // 649\n                                                                                                                // 650\n    if (i + bytesPerSequence <= end) {                                                                          // 651\n      var secondByte, thirdByte, fourthByte, tempCodePoint                                                      // 652\n                                                                                                                // 653\n      switch (bytesPerSequence) {                                                                               // 654\n        case 1:                                                                                                 // 655\n          if (firstByte < 0x80) {                                                                               // 656\n            codePoint = firstByte                                                                               // 657\n          }                                                                                                     // 658\n          break                                                                                                 // 659\n        case 2:                                                                                                 // 660\n          secondByte = buf[i + 1]                                                                               // 661\n          if ((secondByte & 0xC0) === 0x80) {                                                                   // 662\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)                                     // 663\n            if (tempCodePoint > 0x7F) {                                                                         // 664\n              codePoint = tempCodePoint                                                                         // 665\n            }                                                                                                   // 666\n          }                                                                                                     // 667\n          break                                                                                                 // 668\n        case 3:                                                                                                 // 669\n          secondByte = buf[i + 1]                                                                               // 670\n          thirdByte = buf[i + 2]                                                                                // 671\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {                                    // 672\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)          // 673\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {                  // 674\n              codePoint = tempCodePoint                                                                         // 675\n            }                                                                                                   // 676\n          }                                                                                                     // 677\n          break                                                                                                 // 678\n        case 4:                                                                                                 // 679\n          secondByte = buf[i + 1]                                                                               // 680\n          thirdByte = buf[i + 2]                                                                                // 681\n          fourthByte = buf[i + 3]                                                                               // 682\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {    // 683\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {                                           // 685\n              codePoint = tempCodePoint                                                                         // 686\n            }                                                                                                   // 687\n          }                                                                                                     // 688\n      }                                                                                                         // 689\n    }                                                                                                           // 690\n                                                                                                                // 691\n    if (codePoint === null) {                                                                                   // 692\n      // we did not generate a valid codePoint so insert a                                                      // 693\n      // replacement char (U+FFFD) and advance only 1 byte                                                      // 694\n      codePoint = 0xFFFD                                                                                        // 695\n      bytesPerSequence = 1                                                                                      // 696\n    } else if (codePoint > 0xFFFF) {                                                                            // 697\n      // encode to utf16 (surrogate pair dance)                                                                 // 698\n      codePoint -= 0x10000                                                                                      // 699\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)                                                               // 700\n      codePoint = 0xDC00 | codePoint & 0x3FF                                                                    // 701\n    }                                                                                                           // 702\n                                                                                                                // 703\n    res.push(codePoint)                                                                                         // 704\n    i += bytesPerSequence                                                                                       // 705\n  }                                                                                                             // 706\n                                                                                                                // 707\n  return decodeCodePointsArray(res)                                                                             // 708\n}                                                                                                               // 709\n                                                                                                                // 710\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with                                        // 711\n// the lowest limit is Chrome, with 0x10000 args.                                                               // 712\n// We go 1 magnitude less, for safety                                                                           // 713\nvar MAX_ARGUMENTS_LENGTH = 0x1000                                                                               // 714\n                                                                                                                // 715\nfunction decodeCodePointsArray (codePoints) {                                                                   // 716\n  var len = codePoints.length                                                                                   // 717\n  if (len <= MAX_ARGUMENTS_LENGTH) {                                                                            // 718\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()                                 // 719\n  }                                                                                                             // 720\n                                                                                                                // 721\n  // Decode in chunks to avoid \"call stack size exceeded\".                                                      // 722\n  var res = ''                                                                                                  // 723\n  var i = 0                                                                                                     // 724\n  while (i < len) {                                                                                             // 725\n    res += String.fromCharCode.apply(                                                                           // 726\n      String,                                                                                                   // 727\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)                                                            // 728\n    )                                                                                                           // 729\n  }                                                                                                             // 730\n  return res                                                                                                    // 731\n}                                                                                                               // 732\n                                                                                                                // 733\nfunction asciiSlice (buf, start, end) {                                                                         // 734\n  var ret = ''                                                                                                  // 735\n  end = Math.min(buf.length, end)                                                                               // 736\n                                                                                                                // 737\n  for (var i = start; i < end; i++) {                                                                           // 738\n    ret += String.fromCharCode(buf[i] & 0x7F)                                                                   // 739\n  }                                                                                                             // 740\n  return ret                                                                                                    // 741\n}                                                                                                               // 742\n                                                                                                                // 743\nfunction binarySlice (buf, start, end) {                                                                        // 744\n  var ret = ''                                                                                                  // 745\n  end = Math.min(buf.length, end)                                                                               // 746\n                                                                                                                // 747\n  for (var i = start; i < end; i++) {                                                                           // 748\n    ret += String.fromCharCode(buf[i])                                                                          // 749\n  }                                                                                                             // 750\n  return ret                                                                                                    // 751\n}                                                                                                               // 752\n                                                                                                                // 753\nfunction hexSlice (buf, start, end) {                                                                           // 754\n  var len = buf.length                                                                                          // 755\n                                                                                                                // 756\n  if (!start || start < 0) start = 0                                                                            // 757\n  if (!end || end < 0 || end > len) end = len                                                                   // 758\n                                                                                                                // 759\n  var out = ''                                                                                                  // 760\n  for (var i = start; i < end; i++) {                                                                           // 761\n    out += toHex(buf[i])                                                                                        // 762\n  }                                                                                                             // 763\n  return out                                                                                                    // 764\n}                                                                                                               // 765\n                                                                                                                // 766\nfunction utf16leSlice (buf, start, end) {                                                                       // 767\n  var bytes = buf.slice(start, end)                                                                             // 768\n  var res = ''                                                                                                  // 769\n  for (var i = 0; i < bytes.length; i += 2) {                                                                   // 770\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)                                                   // 771\n  }                                                                                                             // 772\n  return res                                                                                                    // 773\n}                                                                                                               // 774\n                                                                                                                // 775\nBuffer.prototype.slice = function slice (start, end) {                                                          // 776\n  var len = this.length                                                                                         // 777\n  start = ~~start                                                                                               // 778\n  end = end === undefined ? len : ~~end                                                                         // 779\n                                                                                                                // 780\n  if (start < 0) {                                                                                              // 781\n    start += len                                                                                                // 782\n    if (start < 0) start = 0                                                                                    // 783\n  } else if (start > len) {                                                                                     // 784\n    start = len                                                                                                 // 785\n  }                                                                                                             // 786\n                                                                                                                // 787\n  if (end < 0) {                                                                                                // 788\n    end += len                                                                                                  // 789\n    if (end < 0) end = 0                                                                                        // 790\n  } else if (end > len) {                                                                                       // 791\n    end = len                                                                                                   // 792\n  }                                                                                                             // 793\n                                                                                                                // 794\n  if (end < start) end = start                                                                                  // 795\n                                                                                                                // 796\n  var newBuf                                                                                                    // 797\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                             // 798\n    newBuf = this.subarray(start, end)                                                                          // 799\n    newBuf.__proto__ = Buffer.prototype                                                                         // 800\n  } else {                                                                                                      // 801\n    var sliceLen = end - start                                                                                  // 802\n    newBuf = new Buffer(sliceLen, undefined)                                                                    // 803\n    for (var i = 0; i < sliceLen; i++) {                                                                        // 804\n      newBuf[i] = this[i + start]                                                                               // 805\n    }                                                                                                           // 806\n  }                                                                                                             // 807\n                                                                                                                // 808\n  if (newBuf.length) newBuf.parent = this.parent || this                                                        // 809\n                                                                                                                // 810\n  return newBuf                                                                                                 // 811\n}                                                                                                               // 812\n                                                                                                                // 813\n/*                                                                                                              // 814\n * Need to make sure that buffer isn't trying to write out of bounds.                                           // 815\n */                                                                                                             // 816\nfunction checkOffset (offset, ext, length) {                                                                    // 817\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')                              // 818\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')                      // 819\n}                                                                                                               // 820\n                                                                                                                // 821\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {                              // 822\n  offset = offset | 0                                                                                           // 823\n  byteLength = byteLength | 0                                                                                   // 824\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                   // 825\n                                                                                                                // 826\n  var val = this[offset]                                                                                        // 827\n  var mul = 1                                                                                                   // 828\n  var i = 0                                                                                                     // 829\n  while (++i < byteLength && (mul *= 0x100)) {                                                                  // 830\n    val += this[offset + i] * mul                                                                               // 831\n  }                                                                                                             // 832\n                                                                                                                // 833\n  return val                                                                                                    // 834\n}                                                                                                               // 835\n                                                                                                                // 836\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {                              // 837\n  offset = offset | 0                                                                                           // 838\n  byteLength = byteLength | 0                                                                                   // 839\n  if (!noAssert) {                                                                                              // 840\n    checkOffset(offset, byteLength, this.length)                                                                // 841\n  }                                                                                                             // 842\n                                                                                                                // 843\n  var val = this[offset + --byteLength]                                                                         // 844\n  var mul = 1                                                                                                   // 845\n  while (byteLength > 0 && (mul *= 0x100)) {                                                                    // 846\n    val += this[offset + --byteLength] * mul                                                                    // 847\n  }                                                                                                             // 848\n                                                                                                                // 849\n  return val                                                                                                    // 850\n}                                                                                                               // 851\n                                                                                                                // 852\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {                                            // 853\n  if (!noAssert) checkOffset(offset, 1, this.length)                                                            // 854\n  return this[offset]                                                                                           // 855\n}                                                                                                               // 856\n                                                                                                                // 857\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {                                      // 858\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                            // 859\n  return this[offset] | (this[offset + 1] << 8)                                                                 // 860\n}                                                                                                               // 861\n                                                                                                                // 862\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {                                      // 863\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                            // 864\n  return (this[offset] << 8) | this[offset + 1]                                                                 // 865\n}                                                                                                               // 866\n                                                                                                                // 867\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {                                      // 868\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                            // 869\n                                                                                                                // 870\n  return ((this[offset]) |                                                                                      // 871\n      (this[offset + 1] << 8) |                                                                                 // 872\n      (this[offset + 2] << 16)) +                                                                               // 873\n      (this[offset + 3] * 0x1000000)                                                                            // 874\n}                                                                                                               // 875\n                                                                                                                // 876\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {                                      // 877\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                            // 878\n                                                                                                                // 879\n  return (this[offset] * 0x1000000) +                                                                           // 880\n    ((this[offset + 1] << 16) |                                                                                 // 881\n    (this[offset + 2] << 8) |                                                                                   // 882\n    this[offset + 3])                                                                                           // 883\n}                                                                                                               // 884\n                                                                                                                // 885\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {                                // 886\n  offset = offset | 0                                                                                           // 887\n  byteLength = byteLength | 0                                                                                   // 888\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                   // 889\n                                                                                                                // 890\n  var val = this[offset]                                                                                        // 891\n  var mul = 1                                                                                                   // 892\n  var i = 0                                                                                                     // 893\n  while (++i < byteLength && (mul *= 0x100)) {                                                                  // 894\n    val += this[offset + i] * mul                                                                               // 895\n  }                                                                                                             // 896\n  mul *= 0x80                                                                                                   // 897\n                                                                                                                // 898\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                            // 899\n                                                                                                                // 900\n  return val                                                                                                    // 901\n}                                                                                                               // 902\n                                                                                                                // 903\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {                                // 904\n  offset = offset | 0                                                                                           // 905\n  byteLength = byteLength | 0                                                                                   // 906\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                   // 907\n                                                                                                                // 908\n  var i = byteLength                                                                                            // 909\n  var mul = 1                                                                                                   // 910\n  var val = this[offset + --i]                                                                                  // 911\n  while (i > 0 && (mul *= 0x100)) {                                                                             // 912\n    val += this[offset + --i] * mul                                                                             // 913\n  }                                                                                                             // 914\n  mul *= 0x80                                                                                                   // 915\n                                                                                                                // 916\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                            // 917\n                                                                                                                // 918\n  return val                                                                                                    // 919\n}                                                                                                               // 920\n                                                                                                                // 921\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {                                              // 922\n  if (!noAssert) checkOffset(offset, 1, this.length)                                                            // 923\n  if (!(this[offset] & 0x80)) return (this[offset])                                                             // 924\n  return ((0xff - this[offset] + 1) * -1)                                                                       // 925\n}                                                                                                               // 926\n                                                                                                                // 927\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {                                        // 928\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                            // 929\n  var val = this[offset] | (this[offset + 1] << 8)                                                              // 930\n  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                // 931\n}                                                                                                               // 932\n                                                                                                                // 933\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {                                        // 934\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                            // 935\n  var val = this[offset + 1] | (this[offset] << 8)                                                              // 936\n  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                // 937\n}                                                                                                               // 938\n                                                                                                                // 939\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {                                        // 940\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                            // 941\n                                                                                                                // 942\n  return (this[offset]) |                                                                                       // 943\n    (this[offset + 1] << 8) |                                                                                   // 944\n    (this[offset + 2] << 16) |                                                                                  // 945\n    (this[offset + 3] << 24)                                                                                    // 946\n}                                                                                                               // 947\n                                                                                                                // 948\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {                                        // 949\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                            // 950\n                                                                                                                // 951\n  return (this[offset] << 24) |                                                                                 // 952\n    (this[offset + 1] << 16) |                                                                                  // 953\n    (this[offset + 2] << 8) |                                                                                   // 954\n    (this[offset + 3])                                                                                          // 955\n}                                                                                                               // 956\n                                                                                                                // 957\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {                                        // 958\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                            // 959\n  return ieee754.read(this, offset, true, 23, 4)                                                                // 960\n}                                                                                                               // 961\n                                                                                                                // 962\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {                                        // 963\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                            // 964\n  return ieee754.read(this, offset, false, 23, 4)                                                               // 965\n}                                                                                                               // 966\n                                                                                                                // 967\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {                                      // 968\n  if (!noAssert) checkOffset(offset, 8, this.length)                                                            // 969\n  return ieee754.read(this, offset, true, 52, 8)                                                                // 970\n}                                                                                                               // 971\n                                                                                                                // 972\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {                                      // 973\n  if (!noAssert) checkOffset(offset, 8, this.length)                                                            // 974\n  return ieee754.read(this, offset, false, 52, 8)                                                               // 975\n}                                                                                                               // 976\n                                                                                                                // 977\nfunction checkInt (buf, value, offset, ext, max, min) {                                                         // 978\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')                            // 979\n  if (value > max || value < min) throw new RangeError('value is out of bounds')                                // 980\n  if (offset + ext > buf.length) throw new RangeError('index out of range')                                     // 981\n}                                                                                                               // 982\n                                                                                                                // 983\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {                     // 984\n  value = +value                                                                                                // 985\n  offset = offset | 0                                                                                           // 986\n  byteLength = byteLength | 0                                                                                   // 987\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)                      // 988\n                                                                                                                // 989\n  var mul = 1                                                                                                   // 990\n  var i = 0                                                                                                     // 991\n  this[offset] = value & 0xFF                                                                                   // 992\n  while (++i < byteLength && (mul *= 0x100)) {                                                                  // 993\n    this[offset + i] = (value / mul) & 0xFF                                                                     // 994\n  }                                                                                                             // 995\n                                                                                                                // 996\n  return offset + byteLength                                                                                    // 997\n}                                                                                                               // 998\n                                                                                                                // 999\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {                     // 1000\n  value = +value                                                                                                // 1001\n  offset = offset | 0                                                                                           // 1002\n  byteLength = byteLength | 0                                                                                   // 1003\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)                      // 1004\n                                                                                                                // 1005\n  var i = byteLength - 1                                                                                        // 1006\n  var mul = 1                                                                                                   // 1007\n  this[offset + i] = value & 0xFF                                                                               // 1008\n  while (--i >= 0 && (mul *= 0x100)) {                                                                          // 1009\n    this[offset + i] = (value / mul) & 0xFF                                                                     // 1010\n  }                                                                                                             // 1011\n                                                                                                                // 1012\n  return offset + byteLength                                                                                    // 1013\n}                                                                                                               // 1014\n                                                                                                                // 1015\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {                                   // 1016\n  value = +value                                                                                                // 1017\n  offset = offset | 0                                                                                           // 1018\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)                                                      // 1019\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                    // 1020\n  this[offset] = (value & 0xff)                                                                                 // 1021\n  return offset + 1                                                                                             // 1022\n}                                                                                                               // 1023\n                                                                                                                // 1024\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {                                                 // 1025\n  if (value < 0) value = 0xffff + value + 1                                                                     // 1026\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {                                           // 1027\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>                                  // 1028\n      (littleEndian ? i : 1 - i) * 8                                                                            // 1029\n  }                                                                                                             // 1030\n}                                                                                                               // 1031\n                                                                                                                // 1032\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {                             // 1033\n  value = +value                                                                                                // 1034\n  offset = offset | 0                                                                                           // 1035\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                    // 1036\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                             // 1037\n    this[offset] = (value & 0xff)                                                                               // 1038\n    this[offset + 1] = (value >>> 8)                                                                            // 1039\n  } else {                                                                                                      // 1040\n    objectWriteUInt16(this, value, offset, true)                                                                // 1041\n  }                                                                                                             // 1042\n  return offset + 2                                                                                             // 1043\n}                                                                                                               // 1044\n                                                                                                                // 1045\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {                             // 1046\n  value = +value                                                                                                // 1047\n  offset = offset | 0                                                                                           // 1048\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                    // 1049\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                             // 1050\n    this[offset] = (value >>> 8)                                                                                // 1051\n    this[offset + 1] = (value & 0xff)                                                                           // 1052\n  } else {                                                                                                      // 1053\n    objectWriteUInt16(this, value, offset, false)                                                               // 1054\n  }                                                                                                             // 1055\n  return offset + 2                                                                                             // 1056\n}                                                                                                               // 1057\n                                                                                                                // 1058\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {                                                 // 1059\n  if (value < 0) value = 0xffffffff + value + 1                                                                 // 1060\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {                                           // 1061\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff                                         // 1062\n  }                                                                                                             // 1063\n}                                                                                                               // 1064\n                                                                                                                // 1065\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {                             // 1066\n  value = +value                                                                                                // 1067\n  offset = offset | 0                                                                                           // 1068\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                // 1069\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                             // 1070\n    this[offset + 3] = (value >>> 24)                                                                           // 1071\n    this[offset + 2] = (value >>> 16)                                                                           // 1072\n    this[offset + 1] = (value >>> 8)                                                                            // 1073\n    this[offset] = (value & 0xff)                                                                               // 1074\n  } else {                                                                                                      // 1075\n    objectWriteUInt32(this, value, offset, true)                                                                // 1076\n  }                                                                                                             // 1077\n  return offset + 4                                                                                             // 1078\n}                                                                                                               // 1079\n                                                                                                                // 1080\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {                             // 1081\n  value = +value                                                                                                // 1082\n  offset = offset | 0                                                                                           // 1083\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                // 1084\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                             // 1085\n    this[offset] = (value >>> 24)                                                                               // 1086\n    this[offset + 1] = (value >>> 16)                                                                           // 1087\n    this[offset + 2] = (value >>> 8)                                                                            // 1088\n    this[offset + 3] = (value & 0xff)                                                                           // 1089\n  } else {                                                                                                      // 1090\n    objectWriteUInt32(this, value, offset, false)                                                               // 1091\n  }                                                                                                             // 1092\n  return offset + 4                                                                                             // 1093\n}                                                                                                               // 1094\n                                                                                                                // 1095\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {                       // 1096\n  value = +value                                                                                                // 1097\n  offset = offset | 0                                                                                           // 1098\n  if (!noAssert) {                                                                                              // 1099\n    var limit = Math.pow(2, 8 * byteLength - 1)                                                                 // 1100\n                                                                                                                // 1101\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                // 1102\n  }                                                                                                             // 1103\n                                                                                                                // 1104\n  var i = 0                                                                                                     // 1105\n  var mul = 1                                                                                                   // 1106\n  var sub = value < 0 ? 1 : 0                                                                                   // 1107\n  this[offset] = value & 0xFF                                                                                   // 1108\n  while (++i < byteLength && (mul *= 0x100)) {                                                                  // 1109\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                        // 1110\n  }                                                                                                             // 1111\n                                                                                                                // 1112\n  return offset + byteLength                                                                                    // 1113\n}                                                                                                               // 1114\n                                                                                                                // 1115\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {                       // 1116\n  value = +value                                                                                                // 1117\n  offset = offset | 0                                                                                           // 1118\n  if (!noAssert) {                                                                                              // 1119\n    var limit = Math.pow(2, 8 * byteLength - 1)                                                                 // 1120\n                                                                                                                // 1121\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                // 1122\n  }                                                                                                             // 1123\n                                                                                                                // 1124\n  var i = byteLength - 1                                                                                        // 1125\n  var mul = 1                                                                                                   // 1126\n  var sub = value < 0 ? 1 : 0                                                                                   // 1127\n  this[offset + i] = value & 0xFF                                                                               // 1128\n  while (--i >= 0 && (mul *= 0x100)) {                                                                          // 1129\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                        // 1130\n  }                                                                                                             // 1131\n                                                                                                                // 1132\n  return offset + byteLength                                                                                    // 1133\n}                                                                                                               // 1134\n                                                                                                                // 1135\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {                                     // 1136\n  value = +value                                                                                                // 1137\n  offset = offset | 0                                                                                           // 1138\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)                                                  // 1139\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                    // 1140\n  if (value < 0) value = 0xff + value + 1                                                                       // 1141\n  this[offset] = (value & 0xff)                                                                                 // 1142\n  return offset + 1                                                                                             // 1143\n}                                                                                                               // 1144\n                                                                                                                // 1145\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {                               // 1146\n  value = +value                                                                                                // 1147\n  offset = offset | 0                                                                                           // 1148\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                              // 1149\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                             // 1150\n    this[offset] = (value & 0xff)                                                                               // 1151\n    this[offset + 1] = (value >>> 8)                                                                            // 1152\n  } else {                                                                                                      // 1153\n    objectWriteUInt16(this, value, offset, true)                                                                // 1154\n  }                                                                                                             // 1155\n  return offset + 2                                                                                             // 1156\n}                                                                                                               // 1157\n                                                                                                                // 1158\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {                               // 1159\n  value = +value                                                                                                // 1160\n  offset = offset | 0                                                                                           // 1161\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                              // 1162\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                             // 1163\n    this[offset] = (value >>> 8)                                                                                // 1164\n    this[offset + 1] = (value & 0xff)                                                                           // 1165\n  } else {                                                                                                      // 1166\n    objectWriteUInt16(this, value, offset, false)                                                               // 1167\n  }                                                                                                             // 1168\n  return offset + 2                                                                                             // 1169\n}                                                                                                               // 1170\n                                                                                                                // 1171\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {                               // 1172\n  value = +value                                                                                                // 1173\n  offset = offset | 0                                                                                           // 1174\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                      // 1175\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                             // 1176\n    this[offset] = (value & 0xff)                                                                               // 1177\n    this[offset + 1] = (value >>> 8)                                                                            // 1178\n    this[offset + 2] = (value >>> 16)                                                                           // 1179\n    this[offset + 3] = (value >>> 24)                                                                           // 1180\n  } else {                                                                                                      // 1181\n    objectWriteUInt32(this, value, offset, true)                                                                // 1182\n  }                                                                                                             // 1183\n  return offset + 4                                                                                             // 1184\n}                                                                                                               // 1185\n                                                                                                                // 1186\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {                               // 1187\n  value = +value                                                                                                // 1188\n  offset = offset | 0                                                                                           // 1189\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                      // 1190\n  if (value < 0) value = 0xffffffff + value + 1                                                                 // 1191\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                             // 1192\n    this[offset] = (value >>> 24)                                                                               // 1193\n    this[offset + 1] = (value >>> 16)                                                                           // 1194\n    this[offset + 2] = (value >>> 8)                                                                            // 1195\n    this[offset + 3] = (value & 0xff)                                                                           // 1196\n  } else {                                                                                                      // 1197\n    objectWriteUInt32(this, value, offset, false)                                                               // 1198\n  }                                                                                                             // 1199\n  return offset + 4                                                                                             // 1200\n}                                                                                                               // 1201\n                                                                                                                // 1202\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {                                                     // 1203\n  if (offset + ext > buf.length) throw new RangeError('index out of range')                                     // 1204\n  if (offset < 0) throw new RangeError('index out of range')                                                    // 1205\n}                                                                                                               // 1206\n                                                                                                                // 1207\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {                                              // 1208\n  if (!noAssert) {                                                                                              // 1209\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)                        // 1210\n  }                                                                                                             // 1211\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)                                                        // 1212\n  return offset + 4                                                                                             // 1213\n}                                                                                                               // 1214\n                                                                                                                // 1215\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {                               // 1216\n  return writeFloat(this, value, offset, true, noAssert)                                                        // 1217\n}                                                                                                               // 1218\n                                                                                                                // 1219\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {                               // 1220\n  return writeFloat(this, value, offset, false, noAssert)                                                       // 1221\n}                                                                                                               // 1222\n                                                                                                                // 1223\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {                                             // 1224\n  if (!noAssert) {                                                                                              // 1225\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)                      // 1226\n  }                                                                                                             // 1227\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)                                                        // 1228\n  return offset + 8                                                                                             // 1229\n}                                                                                                               // 1230\n                                                                                                                // 1231\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {                             // 1232\n  return writeDouble(this, value, offset, true, noAssert)                                                       // 1233\n}                                                                                                               // 1234\n                                                                                                                // 1235\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {                             // 1236\n  return writeDouble(this, value, offset, false, noAssert)                                                      // 1237\n}                                                                                                               // 1238\n                                                                                                                // 1239\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)                                    // 1240\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {                                       // 1241\n  if (!start) start = 0                                                                                         // 1242\n  if (!end && end !== 0) end = this.length                                                                      // 1243\n  if (targetStart >= target.length) targetStart = target.length                                                 // 1244\n  if (!targetStart) targetStart = 0                                                                             // 1245\n  if (end > 0 && end < start) end = start                                                                       // 1246\n                                                                                                                // 1247\n  // Copy 0 bytes; we're done                                                                                   // 1248\n  if (end === start) return 0                                                                                   // 1249\n  if (target.length === 0 || this.length === 0) return 0                                                        // 1250\n                                                                                                                // 1251\n  // Fatal error conditions                                                                                     // 1252\n  if (targetStart < 0) {                                                                                        // 1253\n    throw new RangeError('targetStart out of bounds')                                                           // 1254\n  }                                                                                                             // 1255\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')                      // 1256\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')                                                  // 1257\n                                                                                                                // 1258\n  // Are we oob?                                                                                                // 1259\n  if (end > this.length) end = this.length                                                                      // 1260\n  if (target.length - targetStart < end - start) {                                                              // 1261\n    end = target.length - targetStart + start                                                                   // 1262\n  }                                                                                                             // 1263\n                                                                                                                // 1264\n  var len = end - start                                                                                         // 1265\n  var i                                                                                                         // 1266\n                                                                                                                // 1267\n  if (this === target && start < targetStart && targetStart < end) {                                            // 1268\n    // descending copy from end                                                                                 // 1269\n    for (i = len - 1; i >= 0; i--) {                                                                            // 1270\n      target[i + targetStart] = this[i + start]                                                                 // 1271\n    }                                                                                                           // 1272\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {                                                       // 1273\n    // ascending copy from start                                                                                // 1274\n    for (i = 0; i < len; i++) {                                                                                 // 1275\n      target[i + targetStart] = this[i + start]                                                                 // 1276\n    }                                                                                                           // 1277\n  } else {                                                                                                      // 1278\n    Uint8Array.prototype.set.call(                                                                              // 1279\n      target,                                                                                                   // 1280\n      this.subarray(start, start + len),                                                                        // 1281\n      targetStart                                                                                               // 1282\n    )                                                                                                           // 1283\n  }                                                                                                             // 1284\n                                                                                                                // 1285\n  return len                                                                                                    // 1286\n}                                                                                                               // 1287\n                                                                                                                // 1288\n// fill(value, start=0, end=buffer.length)                                                                      // 1289\nBuffer.prototype.fill = function fill (value, start, end) {                                                     // 1290\n  if (!value) value = 0                                                                                         // 1291\n  if (!start) start = 0                                                                                         // 1292\n  if (!end) end = this.length                                                                                   // 1293\n                                                                                                                // 1294\n  if (end < start) throw new RangeError('end < start')                                                          // 1295\n                                                                                                                // 1296\n  // Fill 0 bytes; we're done                                                                                   // 1297\n  if (end === start) return                                                                                     // 1298\n  if (this.length === 0) return                                                                                 // 1299\n                                                                                                                // 1300\n  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')                            // 1301\n  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')                                   // 1302\n                                                                                                                // 1303\n  var i                                                                                                         // 1304\n  if (typeof value === 'number') {                                                                              // 1305\n    for (i = start; i < end; i++) {                                                                             // 1306\n      this[i] = value                                                                                           // 1307\n    }                                                                                                           // 1308\n  } else {                                                                                                      // 1309\n    var bytes = utf8ToBytes(value.toString())                                                                   // 1310\n    var len = bytes.length                                                                                      // 1311\n    for (i = start; i < end; i++) {                                                                             // 1312\n      this[i] = bytes[i % len]                                                                                  // 1313\n    }                                                                                                           // 1314\n  }                                                                                                             // 1315\n                                                                                                                // 1316\n  return this                                                                                                   // 1317\n}                                                                                                               // 1318\n                                                                                                                // 1319\n// HELPER FUNCTIONS                                                                                             // 1320\n// ================                                                                                             // 1321\n                                                                                                                // 1322\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g                                                                    // 1323\n                                                                                                                // 1324\nfunction base64clean (str) {                                                                                    // 1325\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not                      // 1326\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')                                                          // 1327\n  // Node converts strings with length < 2 to ''                                                                // 1328\n  if (str.length < 2) return ''                                                                                 // 1329\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not                       // 1330\n  while (str.length % 4 !== 0) {                                                                                // 1331\n    str = str + '='                                                                                             // 1332\n  }                                                                                                             // 1333\n  return str                                                                                                    // 1334\n}                                                                                                               // 1335\n                                                                                                                // 1336\nfunction stringtrim (str) {                                                                                     // 1337\n  if (str.trim) return str.trim()                                                                               // 1338\n  return str.replace(/^\\s+|\\s+$/g, '')                                                                          // 1339\n}                                                                                                               // 1340\n                                                                                                                // 1341\nfunction toHex (n) {                                                                                            // 1342\n  if (n < 16) return '0' + n.toString(16)                                                                       // 1343\n  return n.toString(16)                                                                                         // 1344\n}                                                                                                               // 1345\n                                                                                                                // 1346\nfunction utf8ToBytes (string, units) {                                                                          // 1347\n  units = units || Infinity                                                                                     // 1348\n  var codePoint                                                                                                 // 1349\n  var length = string.length                                                                                    // 1350\n  var leadSurrogate = null                                                                                      // 1351\n  var bytes = []                                                                                                // 1352\n                                                                                                                // 1353\n  for (var i = 0; i < length; i++) {                                                                            // 1354\n    codePoint = string.charCodeAt(i)                                                                            // 1355\n                                                                                                                // 1356\n    // is surrogate component                                                                                   // 1357\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {                                                             // 1358\n      // last char was a lead                                                                                   // 1359\n      if (!leadSurrogate) {                                                                                     // 1360\n        // no lead yet                                                                                          // 1361\n        if (codePoint > 0xDBFF) {                                                                               // 1362\n          // unexpected trail                                                                                   // 1363\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                   // 1364\n          continue                                                                                              // 1365\n        } else if (i + 1 === length) {                                                                          // 1366\n          // unpaired lead                                                                                      // 1367\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                   // 1368\n          continue                                                                                              // 1369\n        }                                                                                                       // 1370\n                                                                                                                // 1371\n        // valid lead                                                                                           // 1372\n        leadSurrogate = codePoint                                                                               // 1373\n                                                                                                                // 1374\n        continue                                                                                                // 1375\n      }                                                                                                         // 1376\n                                                                                                                // 1377\n      // 2 leads in a row                                                                                       // 1378\n      if (codePoint < 0xDC00) {                                                                                 // 1379\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                     // 1380\n        leadSurrogate = codePoint                                                                               // 1381\n        continue                                                                                                // 1382\n      }                                                                                                         // 1383\n                                                                                                                // 1384\n      // valid surrogate pair                                                                                   // 1385\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000                                 // 1386\n    } else if (leadSurrogate) {                                                                                 // 1387\n      // valid bmp char, but last char was a lead                                                               // 1388\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                       // 1389\n    }                                                                                                           // 1390\n                                                                                                                // 1391\n    leadSurrogate = null                                                                                        // 1392\n                                                                                                                // 1393\n    // encode utf8                                                                                              // 1394\n    if (codePoint < 0x80) {                                                                                     // 1395\n      if ((units -= 1) < 0) break                                                                               // 1396\n      bytes.push(codePoint)                                                                                     // 1397\n    } else if (codePoint < 0x800) {                                                                             // 1398\n      if ((units -= 2) < 0) break                                                                               // 1399\n      bytes.push(                                                                                               // 1400\n        codePoint >> 0x6 | 0xC0,                                                                                // 1401\n        codePoint & 0x3F | 0x80                                                                                 // 1402\n      )                                                                                                         // 1403\n    } else if (codePoint < 0x10000) {                                                                           // 1404\n      if ((units -= 3) < 0) break                                                                               // 1405\n      bytes.push(                                                                                               // 1406\n        codePoint >> 0xC | 0xE0,                                                                                // 1407\n        codePoint >> 0x6 & 0x3F | 0x80,                                                                         // 1408\n        codePoint & 0x3F | 0x80                                                                                 // 1409\n      )                                                                                                         // 1410\n    } else if (codePoint < 0x110000) {                                                                          // 1411\n      if ((units -= 4) < 0) break                                                                               // 1412\n      bytes.push(                                                                                               // 1413\n        codePoint >> 0x12 | 0xF0,                                                                               // 1414\n        codePoint >> 0xC & 0x3F | 0x80,                                                                         // 1415\n        codePoint >> 0x6 & 0x3F | 0x80,                                                                         // 1416\n        codePoint & 0x3F | 0x80                                                                                 // 1417\n      )                                                                                                         // 1418\n    } else {                                                                                                    // 1419\n      throw new Error('Invalid code point')                                                                     // 1420\n    }                                                                                                           // 1421\n  }                                                                                                             // 1422\n                                                                                                                // 1423\n  return bytes                                                                                                  // 1424\n}                                                                                                               // 1425\n                                                                                                                // 1426\nfunction asciiToBytes (str) {                                                                                   // 1427\n  var byteArray = []                                                                                            // 1428\n  for (var i = 0; i < str.length; i++) {                                                                        // 1429\n    // Node's code seems to be doing this and not & 0x7F..                                                      // 1430\n    byteArray.push(str.charCodeAt(i) & 0xFF)                                                                    // 1431\n  }                                                                                                             // 1432\n  return byteArray                                                                                              // 1433\n}                                                                                                               // 1434\n                                                                                                                // 1435\nfunction utf16leToBytes (str, units) {                                                                          // 1436\n  var c, hi, lo                                                                                                 // 1437\n  var byteArray = []                                                                                            // 1438\n  for (var i = 0; i < str.length; i++) {                                                                        // 1439\n    if ((units -= 2) < 0) break                                                                                 // 1440\n                                                                                                                // 1441\n    c = str.charCodeAt(i)                                                                                       // 1442\n    hi = c >> 8                                                                                                 // 1443\n    lo = c % 256                                                                                                // 1444\n    byteArray.push(lo)                                                                                          // 1445\n    byteArray.push(hi)                                                                                          // 1446\n  }                                                                                                             // 1447\n                                                                                                                // 1448\n  return byteArray                                                                                              // 1449\n}                                                                                                               // 1450\n                                                                                                                // 1451\nfunction base64ToBytes (str) {                                                                                  // 1452\n  return base64.toByteArray(base64clean(str))                                                                   // 1453\n}                                                                                                               // 1454\n                                                                                                                // 1455\nfunction blitBuffer (src, dst, offset, length) {                                                                // 1456\n  for (var i = 0; i < length; i++) {                                                                            // 1457\n    if ((i + offset >= dst.length) || (i >= src.length)) break                                                  // 1458\n    dst[i + offset] = src[i]                                                                                    // 1459\n  }                                                                                                             // 1460\n  return i                                                                                                      // 1461\n}                                                                                                               // 1462\n                                                                                                                // 1463\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"base64-js\":{\"package.json\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// node_modules/meteor-node-stubs/node_modules/base64-js/package.json                                           //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nexports.name = \"base64-js\";                                                                                     // 1\nexports.version = \"1.0.4\";                                                                                      // 2\nexports.main = \"lib/b64.js\";                                                                                    // 3\n                                                                                                                // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"b64.js\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// node_modules/meteor-node-stubs/node_modules/base64-js/lib/b64.js                                             //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n;(function (exports) {                                                                                          // 1\n  'use strict'                                                                                                  // 2\n                                                                                                                // 3\n  var i                                                                                                         // 4\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'                                 // 5\n  var lookup = []                                                                                               // 6\n  for (i = 0; i < code.length; i++) {                                                                           // 7\n    lookup[i] = code[i]                                                                                         // 8\n  }                                                                                                             // 9\n  var revLookup = []                                                                                            // 10\n                                                                                                                // 11\n  for (i = 0; i < code.length; ++i) {                                                                           // 12\n    revLookup[code.charCodeAt(i)] = i                                                                           // 13\n  }                                                                                                             // 14\n  revLookup['-'.charCodeAt(0)] = 62                                                                             // 15\n  revLookup['_'.charCodeAt(0)] = 63                                                                             // 16\n                                                                                                                // 17\n  var Arr = (typeof Uint8Array !== 'undefined')                                                                 // 18\n    ? Uint8Array                                                                                                // 19\n    : Array                                                                                                     // 20\n                                                                                                                // 21\n  function decode (elt) {                                                                                       // 22\n    var v = revLookup[elt.charCodeAt(0)]                                                                        // 23\n    return v !== undefined ? v : -1                                                                             // 24\n  }                                                                                                             // 25\n                                                                                                                // 26\n  function b64ToByteArray (b64) {                                                                               // 27\n    var i, j, l, tmp, placeHolders, arr                                                                         // 28\n                                                                                                                // 29\n    if (b64.length % 4 > 0) {                                                                                   // 30\n      throw new Error('Invalid string. Length must be a multiple of 4')                                         // 31\n    }                                                                                                           // 32\n                                                                                                                // 33\n    // the number of equal signs (place holders)                                                                // 34\n    // if there are two placeholders, than the two characters before it                                         // 35\n    // represent one byte                                                                                       // 36\n    // if there is only one, then the three characters before it represent 2 bytes                              // 37\n    // this is just a cheap hack to not do indexOf twice                                                        // 38\n    var len = b64.length                                                                                        // 39\n    placeHolders = b64.charAt(len - 2) === '=' ? 2 : b64.charAt(len - 1) === '=' ? 1 : 0                        // 40\n                                                                                                                // 41\n    // base64 is 4/3 + up to two characters of the original data                                                // 42\n    arr = new Arr(b64.length * 3 / 4 - placeHolders)                                                            // 43\n                                                                                                                // 44\n    // if there are placeholders, only get up to the last complete 4 chars                                      // 45\n    l = placeHolders > 0 ? b64.length - 4 : b64.length                                                          // 46\n                                                                                                                // 47\n    var L = 0                                                                                                   // 48\n                                                                                                                // 49\n    function push (v) {                                                                                         // 50\n      arr[L++] = v                                                                                              // 51\n    }                                                                                                           // 52\n                                                                                                                // 53\n    for (i = 0, j = 0; i < l; i += 4, j += 3) {                                                                 // 54\n      tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n      push((tmp & 0xFF0000) >> 16)                                                                              // 56\n      push((tmp & 0xFF00) >> 8)                                                                                 // 57\n      push(tmp & 0xFF)                                                                                          // 58\n    }                                                                                                           // 59\n                                                                                                                // 60\n    if (placeHolders === 2) {                                                                                   // 61\n      tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)                                     // 62\n      push(tmp & 0xFF)                                                                                          // 63\n    } else if (placeHolders === 1) {                                                                            // 64\n      tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n      push((tmp >> 8) & 0xFF)                                                                                   // 66\n      push(tmp & 0xFF)                                                                                          // 67\n    }                                                                                                           // 68\n                                                                                                                // 69\n    return arr                                                                                                  // 70\n  }                                                                                                             // 71\n                                                                                                                // 72\n  function encode (num) {                                                                                       // 73\n    return lookup[num]                                                                                          // 74\n  }                                                                                                             // 75\n                                                                                                                // 76\n  function tripletToBase64 (num) {                                                                              // 77\n    return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)   // 78\n  }                                                                                                             // 79\n                                                                                                                // 80\n  function encodeChunk (uint8, start, end) {                                                                    // 81\n    var temp                                                                                                    // 82\n    var output = []                                                                                             // 83\n    for (var i = start; i < end; i += 3) {                                                                      // 84\n      temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])                                            // 85\n      output.push(tripletToBase64(temp))                                                                        // 86\n    }                                                                                                           // 87\n    return output.join('')                                                                                      // 88\n  }                                                                                                             // 89\n                                                                                                                // 90\n  function uint8ToBase64 (uint8) {                                                                              // 91\n    var i                                                                                                       // 92\n    var extraBytes = uint8.length % 3 // if we have 1 byte left, pad 2 bytes                                    // 93\n    var output = ''                                                                                             // 94\n    var parts = []                                                                                              // 95\n    var temp, length                                                                                            // 96\n    var maxChunkLength = 16383 // must be multiple of 3                                                         // 97\n                                                                                                                // 98\n    // go through the array every three bytes, we'll deal with trailing stuff later                             // 99\n                                                                                                                // 100\n    for (i = 0, length = uint8.length - extraBytes; i < length; i += maxChunkLength) {                          // 101\n      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > length ? length : (i + maxChunkLength)))          // 102\n    }                                                                                                           // 103\n                                                                                                                // 104\n    // pad the end with zeros, but make sure to not forget the extra bytes                                      // 105\n    switch (extraBytes) {                                                                                       // 106\n      case 1:                                                                                                   // 107\n        temp = uint8[uint8.length - 1]                                                                          // 108\n        output += encode(temp >> 2)                                                                             // 109\n        output += encode((temp << 4) & 0x3F)                                                                    // 110\n        output += '=='                                                                                          // 111\n        break                                                                                                   // 112\n      case 2:                                                                                                   // 113\n        temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])                                       // 114\n        output += encode(temp >> 10)                                                                            // 115\n        output += encode((temp >> 4) & 0x3F)                                                                    // 116\n        output += encode((temp << 2) & 0x3F)                                                                    // 117\n        output += '='                                                                                           // 118\n        break                                                                                                   // 119\n      default:                                                                                                  // 120\n        break                                                                                                   // 121\n    }                                                                                                           // 122\n                                                                                                                // 123\n    parts.push(output)                                                                                          // 124\n                                                                                                                // 125\n    return parts.join('')                                                                                       // 126\n  }                                                                                                             // 127\n                                                                                                                // 128\n  exports.toByteArray = b64ToByteArray                                                                          // 129\n  exports.fromByteArray = uint8ToBase64                                                                         // 130\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))                                             // 131\n                                                                                                                // 132\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"ieee754\":{\"package.json\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// node_modules/meteor-node-stubs/node_modules/ieee754/package.json                                             //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nexports.name = \"ieee754\";                                                                                       // 1\nexports.version = \"1.1.6\";                                                                                      // 2\nexports.main = \"index.js\";                                                                                      // 3\n                                                                                                                // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// node_modules/meteor-node-stubs/node_modules/ieee754/index.js                                                 //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {                                                  // 1\n  var e, m                                                                                                      // 2\n  var eLen = nBytes * 8 - mLen - 1                                                                              // 3\n  var eMax = (1 << eLen) - 1                                                                                    // 4\n  var eBias = eMax >> 1                                                                                         // 5\n  var nBits = -7                                                                                                // 6\n  var i = isLE ? (nBytes - 1) : 0                                                                               // 7\n  var d = isLE ? -1 : 1                                                                                         // 8\n  var s = buffer[offset + i]                                                                                    // 9\n                                                                                                                // 10\n  i += d                                                                                                        // 11\n                                                                                                                // 12\n  e = s & ((1 << (-nBits)) - 1)                                                                                 // 13\n  s >>= (-nBits)                                                                                                // 14\n  nBits += eLen                                                                                                 // 15\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                    // 16\n                                                                                                                // 17\n  m = e & ((1 << (-nBits)) - 1)                                                                                 // 18\n  e >>= (-nBits)                                                                                                // 19\n  nBits += mLen                                                                                                 // 20\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                    // 21\n                                                                                                                // 22\n  if (e === 0) {                                                                                                // 23\n    e = 1 - eBias                                                                                               // 24\n  } else if (e === eMax) {                                                                                      // 25\n    return m ? NaN : ((s ? -1 : 1) * Infinity)                                                                  // 26\n  } else {                                                                                                      // 27\n    m = m + Math.pow(2, mLen)                                                                                   // 28\n    e = e - eBias                                                                                               // 29\n  }                                                                                                             // 30\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)                                                               // 31\n}                                                                                                               // 32\n                                                                                                                // 33\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {                                          // 34\n  var e, m, c                                                                                                   // 35\n  var eLen = nBytes * 8 - mLen - 1                                                                              // 36\n  var eMax = (1 << eLen) - 1                                                                                    // 37\n  var eBias = eMax >> 1                                                                                         // 38\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)                                              // 39\n  var i = isLE ? 0 : (nBytes - 1)                                                                               // 40\n  var d = isLE ? 1 : -1                                                                                         // 41\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0                                                   // 42\n                                                                                                                // 43\n  value = Math.abs(value)                                                                                       // 44\n                                                                                                                // 45\n  if (isNaN(value) || value === Infinity) {                                                                     // 46\n    m = isNaN(value) ? 1 : 0                                                                                    // 47\n    e = eMax                                                                                                    // 48\n  } else {                                                                                                      // 49\n    e = Math.floor(Math.log(value) / Math.LN2)                                                                  // 50\n    if (value * (c = Math.pow(2, -e)) < 1) {                                                                    // 51\n      e--                                                                                                       // 52\n      c *= 2                                                                                                    // 53\n    }                                                                                                           // 54\n    if (e + eBias >= 1) {                                                                                       // 55\n      value += rt / c                                                                                           // 56\n    } else {                                                                                                    // 57\n      value += rt * Math.pow(2, 1 - eBias)                                                                      // 58\n    }                                                                                                           // 59\n    if (value * c >= 2) {                                                                                       // 60\n      e++                                                                                                       // 61\n      c /= 2                                                                                                    // 62\n    }                                                                                                           // 63\n                                                                                                                // 64\n    if (e + eBias >= eMax) {                                                                                    // 65\n      m = 0                                                                                                     // 66\n      e = eMax                                                                                                  // 67\n    } else if (e + eBias >= 1) {                                                                                // 68\n      m = (value * c - 1) * Math.pow(2, mLen)                                                                   // 69\n      e = e + eBias                                                                                             // 70\n    } else {                                                                                                    // 71\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)                                                    // 72\n      e = 0                                                                                                     // 73\n    }                                                                                                           // 74\n  }                                                                                                             // 75\n                                                                                                                // 76\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}                              // 77\n                                                                                                                // 78\n  e = (e << mLen) | m                                                                                           // 79\n  eLen += mLen                                                                                                  // 80\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}                               // 81\n                                                                                                                // 82\n  buffer[offset + i - d] |= s * 128                                                                             // 83\n}                                                                                                               // 84\n                                                                                                                // 85\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"isarray\":{\"package.json\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// node_modules/meteor-node-stubs/node_modules/isarray/package.json                                             //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nexports.name = \"isarray\";                                                                                       // 1\nexports.version = \"1.0.0\";                                                                                      // 2\nexports.main = \"index.js\";                                                                                      // 3\n                                                                                                                // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// node_modules/meteor-node-stubs/node_modules/isarray/index.js                                                 //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nvar toString = {}.toString;                                                                                     // 1\n                                                                                                                // 2\nmodule.exports = Array.isArray || function (arr) {                                                              // 3\n  return toString.call(arr) == '[object Array]';                                                                // 4\n};                                                                                                              // 5\n                                                                                                                // 6\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"process\":{\"browser.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// node_modules/meteor-node-stubs/node_modules/process/browser.js                                               //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n// shim for using process in browser                                                                            // 1\n                                                                                                                // 2\nvar process = module.exports = {};                                                                              // 3\nvar queue = [];                                                                                                 // 4\nvar draining = false;                                                                                           // 5\nvar currentQueue;                                                                                               // 6\nvar queueIndex = -1;                                                                                            // 7\n                                                                                                                // 8\nfunction cleanUpNextTick() {                                                                                    // 9\n    draining = false;                                                                                           // 10\n    if (currentQueue.length) {                                                                                  // 11\n        queue = currentQueue.concat(queue);                                                                     // 12\n    } else {                                                                                                    // 13\n        queueIndex = -1;                                                                                        // 14\n    }                                                                                                           // 15\n    if (queue.length) {                                                                                         // 16\n        drainQueue();                                                                                           // 17\n    }                                                                                                           // 18\n}                                                                                                               // 19\n                                                                                                                // 20\nfunction drainQueue() {                                                                                         // 21\n    if (draining) {                                                                                             // 22\n        return;                                                                                                 // 23\n    }                                                                                                           // 24\n    var timeout = setTimeout(cleanUpNextTick);                                                                  // 25\n    draining = true;                                                                                            // 26\n                                                                                                                // 27\n    var len = queue.length;                                                                                     // 28\n    while(len) {                                                                                                // 29\n        currentQueue = queue;                                                                                   // 30\n        queue = [];                                                                                             // 31\n        while (++queueIndex < len) {                                                                            // 32\n            if (currentQueue) {                                                                                 // 33\n                currentQueue[queueIndex].run();                                                                 // 34\n            }                                                                                                   // 35\n        }                                                                                                       // 36\n        queueIndex = -1;                                                                                        // 37\n        len = queue.length;                                                                                     // 38\n    }                                                                                                           // 39\n    currentQueue = null;                                                                                        // 40\n    draining = false;                                                                                           // 41\n    clearTimeout(timeout);                                                                                      // 42\n}                                                                                                               // 43\n                                                                                                                // 44\nprocess.nextTick = function (fun) {                                                                             // 45\n    var args = new Array(arguments.length - 1);                                                                 // 46\n    if (arguments.length > 1) {                                                                                 // 47\n        for (var i = 1; i < arguments.length; i++) {                                                            // 48\n            args[i - 1] = arguments[i];                                                                         // 49\n        }                                                                                                       // 50\n    }                                                                                                           // 51\n    queue.push(new Item(fun, args));                                                                            // 52\n    if (queue.length === 1 && !draining) {                                                                      // 53\n        setTimeout(drainQueue, 0);                                                                              // 54\n    }                                                                                                           // 55\n};                                                                                                              // 56\n                                                                                                                // 57\n// v8 likes predictible objects                                                                                 // 58\nfunction Item(fun, array) {                                                                                     // 59\n    this.fun = fun;                                                                                             // 60\n    this.array = array;                                                                                         // 61\n}                                                                                                               // 62\nItem.prototype.run = function () {                                                                              // 63\n    this.fun.apply(null, this.array);                                                                           // 64\n};                                                                                                              // 65\nprocess.title = 'browser';                                                                                      // 66\nprocess.browser = true;                                                                                         // 67\nprocess.env = {};                                                                                               // 68\nprocess.argv = [];                                                                                              // 69\nprocess.version = ''; // empty string to avoid regexp issues                                                    // 70\nprocess.versions = {};                                                                                          // 71\n                                                                                                                // 72\nfunction noop() {}                                                                                              // 73\n                                                                                                                // 74\nprocess.on = noop;                                                                                              // 75\nprocess.addListener = noop;                                                                                     // 76\nprocess.once = noop;                                                                                            // 77\nprocess.off = noop;                                                                                             // 78\nprocess.removeListener = noop;                                                                                  // 79\nprocess.removeAllListeners = noop;                                                                              // 80\nprocess.emit = noop;                                                                                            // 81\n                                                                                                                // 82\nprocess.binding = function (name) {                                                                             // 83\n    throw new Error('process.binding is not supported');                                                        // 84\n};                                                                                                              // 85\n                                                                                                                // 86\nprocess.cwd = function () { return '/' };                                                                       // 87\nprocess.chdir = function (dir) {                                                                                // 88\n    throw new Error('process.chdir is not supported');                                                          // 89\n};                                                                                                              // 90\nprocess.umask = function() { return 0; };                                                                       // 91\n                                                                                                                // 92\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"domain-browser\":{\"package.json\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// node_modules/meteor-node-stubs/node_modules/domain-browser/package.json                                      //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nexports.name = \"domain-browser\";                                                                                // 1\nexports.version = \"1.1.7\";                                                                                      // 2\nexports.main = \"./index.js\";                                                                                    // 3\n                                                                                                                // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"events\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// node_modules/meteor-node-stubs/node_modules/domain-browser/index.js                                          //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n// This file should be ES5 compatible                                                                           // 1\n/* eslint prefer-spread:0, no-var:0, prefer-reflect:0, no-magic-numbers:0 */                                    // 2\n'use strict'                                                                                                    // 3\nmodule.exports = (function () {                                                                                 // 4\n\t// Import Events                                                                                               // 5\n\tvar events = require('events')                                                                                 // 6\n                                                                                                                // 7\n\t// Export Domain                                                                                               // 8\n\tvar domain = {}                                                                                                // 9\n\tdomain.createDomain = domain.create = function () {                                                            // 10\n\t\tvar d = new events.EventEmitter()                                                                             // 11\n                                                                                                                // 12\n\t\tfunction emitError (e) {                                                                                      // 13\n\t\t\td.emit('error', e)                                                                                           // 14\n\t\t}                                                                                                             // 15\n                                                                                                                // 16\n\t\td.add = function (emitter) {                                                                                  // 17\n\t\t\temitter.on('error', emitError)                                                                               // 18\n\t\t}                                                                                                             // 19\n\t\td.remove = function (emitter) {                                                                               // 20\n\t\t\temitter.removeListener('error', emitError)                                                                   // 21\n\t\t}                                                                                                             // 22\n\t\td.bind = function (fn) {                                                                                      // 23\n\t\t\treturn function () {                                                                                         // 24\n\t\t\t\tvar args = Array.prototype.slice.call(arguments)                                                            // 25\n\t\t\t\ttry {                                                                                                       // 26\n\t\t\t\t\tfn.apply(null, args)                                                                                       // 27\n\t\t\t\t}                                                                                                           // 28\n\t\t\t\tcatch (err) {                                                                                               // 29\n\t\t\t\t\temitError(err)                                                                                             // 30\n\t\t\t\t}                                                                                                           // 31\n\t\t\t}                                                                                                            // 32\n\t\t}                                                                                                             // 33\n\t\td.intercept = function (fn) {                                                                                 // 34\n\t\t\treturn function (err) {                                                                                      // 35\n\t\t\t\tif ( err ) {                                                                                                // 36\n\t\t\t\t\temitError(err)                                                                                             // 37\n\t\t\t\t}                                                                                                           // 38\n\t\t\t\telse {                                                                                                      // 39\n\t\t\t\t\tvar args = Array.prototype.slice.call(arguments, 1)                                                        // 40\n\t\t\t\t\ttry {                                                                                                      // 41\n\t\t\t\t\t\tfn.apply(null, args)                                                                                      // 42\n\t\t\t\t\t}                                                                                                          // 43\n\t\t\t\t\tcatch (err) {                                                                                              // 44\n\t\t\t\t\t\temitError(err)                                                                                            // 45\n\t\t\t\t\t}                                                                                                          // 46\n\t\t\t\t}                                                                                                           // 47\n\t\t\t}                                                                                                            // 48\n\t\t}                                                                                                             // 49\n\t\td.run = function (fn) {                                                                                       // 50\n\t\t\ttry {                                                                                                        // 51\n\t\t\t\tfn()                                                                                                        // 52\n\t\t\t}                                                                                                            // 53\n\t\t\tcatch (err) {                                                                                                // 54\n\t\t\t\temitError(err)                                                                                              // 55\n\t\t\t}                                                                                                            // 56\n\t\t\treturn this                                                                                                  // 57\n\t\t}                                                                                                             // 58\n\t\td.dispose = function () {                                                                                     // 59\n\t\t\tthis.removeAllListeners()                                                                                    // 60\n\t\t\treturn this                                                                                                  // 61\n\t\t}                                                                                                             // 62\n\t\td.enter = d.exit = function () {                                                                              // 63\n\t\t\treturn this                                                                                                  // 64\n\t\t}                                                                                                             // 65\n\t\treturn d                                                                                                      // 66\n\t}                                                                                                              // 67\n\treturn domain                                                                                                  // 68\n}).call(this)                                                                                                   // 69\n                                                                                                                // 70\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"events\":{\"package.json\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// node_modules/meteor-node-stubs/node_modules/events/package.json                                              //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nexports.name = \"events\";                                                                                        // 1\nexports.version = \"1.1.0\";                                                                                      // 2\nexports.main = \"./events.js\";                                                                                   // 3\n                                                                                                                // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"events.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// node_modules/meteor-node-stubs/node_modules/events/events.js                                                 //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n// Copyright Joyent, Inc. and other Node contributors.                                                          // 1\n//                                                                                                              // 2\n// Permission is hereby granted, free of charge, to any person obtaining a                                      // 3\n// copy of this software and associated documentation files (the                                                // 4\n// \"Software\"), to deal in the Software without restriction, including                                          // 5\n// without limitation the rights to use, copy, modify, merge, publish,                                          // 6\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                    // 7\n// persons to whom the Software is furnished to do so, subject to the                                           // 8\n// following conditions:                                                                                        // 9\n//                                                                                                              // 10\n// The above copyright notice and this permission notice shall be included                                      // 11\n// in all copies or substantial portions of the Software.                                                       // 12\n//                                                                                                              // 13\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                      // 14\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                   // 15\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                    // 16\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                     // 17\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                        // 18\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                    // 19\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                       // 20\n                                                                                                                // 21\nfunction EventEmitter() {                                                                                       // 22\n  this._events = this._events || {};                                                                            // 23\n  this._maxListeners = this._maxListeners || undefined;                                                         // 24\n}                                                                                                               // 25\nmodule.exports = EventEmitter;                                                                                  // 26\n                                                                                                                // 27\n// Backwards-compat with node 0.10.x                                                                            // 28\nEventEmitter.EventEmitter = EventEmitter;                                                                       // 29\n                                                                                                                // 30\nEventEmitter.prototype._events = undefined;                                                                     // 31\nEventEmitter.prototype._maxListeners = undefined;                                                               // 32\n                                                                                                                // 33\n// By default EventEmitters will print a warning if more than 10 listeners are                                  // 34\n// added to it. This is a useful default which helps finding memory leaks.                                      // 35\nEventEmitter.defaultMaxListeners = 10;                                                                          // 36\n                                                                                                                // 37\n// Obviously not all Emitters should be limited to 10. This function allows                                     // 38\n// that to be increased. Set to zero for unlimited.                                                             // 39\nEventEmitter.prototype.setMaxListeners = function(n) {                                                          // 40\n  if (!isNumber(n) || n < 0 || isNaN(n))                                                                        // 41\n    throw TypeError('n must be a positive number');                                                             // 42\n  this._maxListeners = n;                                                                                       // 43\n  return this;                                                                                                  // 44\n};                                                                                                              // 45\n                                                                                                                // 46\nEventEmitter.prototype.emit = function(type) {                                                                  // 47\n  var er, handler, len, args, i, listeners;                                                                     // 48\n                                                                                                                // 49\n  if (!this._events)                                                                                            // 50\n    this._events = {};                                                                                          // 51\n                                                                                                                // 52\n  // If there is no 'error' event listener then throw.                                                          // 53\n  if (type === 'error') {                                                                                       // 54\n    if (!this._events.error ||                                                                                  // 55\n        (isObject(this._events.error) && !this._events.error.length)) {                                         // 56\n      er = arguments[1];                                                                                        // 57\n      if (er instanceof Error) {                                                                                // 58\n        throw er; // Unhandled 'error' event                                                                    // 59\n      }                                                                                                         // 60\n      throw TypeError('Uncaught, unspecified \"error\" event.');                                                  // 61\n    }                                                                                                           // 62\n  }                                                                                                             // 63\n                                                                                                                // 64\n  handler = this._events[type];                                                                                 // 65\n                                                                                                                // 66\n  if (isUndefined(handler))                                                                                     // 67\n    return false;                                                                                               // 68\n                                                                                                                // 69\n  if (isFunction(handler)) {                                                                                    // 70\n    switch (arguments.length) {                                                                                 // 71\n      // fast cases                                                                                             // 72\n      case 1:                                                                                                   // 73\n        handler.call(this);                                                                                     // 74\n        break;                                                                                                  // 75\n      case 2:                                                                                                   // 76\n        handler.call(this, arguments[1]);                                                                       // 77\n        break;                                                                                                  // 78\n      case 3:                                                                                                   // 79\n        handler.call(this, arguments[1], arguments[2]);                                                         // 80\n        break;                                                                                                  // 81\n      // slower                                                                                                 // 82\n      default:                                                                                                  // 83\n        args = Array.prototype.slice.call(arguments, 1);                                                        // 84\n        handler.apply(this, args);                                                                              // 85\n    }                                                                                                           // 86\n  } else if (isObject(handler)) {                                                                               // 87\n    args = Array.prototype.slice.call(arguments, 1);                                                            // 88\n    listeners = handler.slice();                                                                                // 89\n    len = listeners.length;                                                                                     // 90\n    for (i = 0; i < len; i++)                                                                                   // 91\n      listeners[i].apply(this, args);                                                                           // 92\n  }                                                                                                             // 93\n                                                                                                                // 94\n  return true;                                                                                                  // 95\n};                                                                                                              // 96\n                                                                                                                // 97\nEventEmitter.prototype.addListener = function(type, listener) {                                                 // 98\n  var m;                                                                                                        // 99\n                                                                                                                // 100\n  if (!isFunction(listener))                                                                                    // 101\n    throw TypeError('listener must be a function');                                                             // 102\n                                                                                                                // 103\n  if (!this._events)                                                                                            // 104\n    this._events = {};                                                                                          // 105\n                                                                                                                // 106\n  // To avoid recursion in the case that type === \"newListener\"! Before                                         // 107\n  // adding it to the listeners, first emit \"newListener\".                                                      // 108\n  if (this._events.newListener)                                                                                 // 109\n    this.emit('newListener', type,                                                                              // 110\n              isFunction(listener.listener) ?                                                                   // 111\n              listener.listener : listener);                                                                    // 112\n                                                                                                                // 113\n  if (!this._events[type])                                                                                      // 114\n    // Optimize the case of one listener. Don't need the extra array object.                                    // 115\n    this._events[type] = listener;                                                                              // 116\n  else if (isObject(this._events[type]))                                                                        // 117\n    // If we've already got an array, just append.                                                              // 118\n    this._events[type].push(listener);                                                                          // 119\n  else                                                                                                          // 120\n    // Adding the second element, need to change to array.                                                      // 121\n    this._events[type] = [this._events[type], listener];                                                        // 122\n                                                                                                                // 123\n  // Check for listener leak                                                                                    // 124\n  if (isObject(this._events[type]) && !this._events[type].warned) {                                             // 125\n    if (!isUndefined(this._maxListeners)) {                                                                     // 126\n      m = this._maxListeners;                                                                                   // 127\n    } else {                                                                                                    // 128\n      m = EventEmitter.defaultMaxListeners;                                                                     // 129\n    }                                                                                                           // 130\n                                                                                                                // 131\n    if (m && m > 0 && this._events[type].length > m) {                                                          // 132\n      this._events[type].warned = true;                                                                         // 133\n      console.error('(node) warning: possible EventEmitter memory ' +                                           // 134\n                    'leak detected. %d listeners added. ' +                                                     // 135\n                    'Use emitter.setMaxListeners() to increase limit.',                                         // 136\n                    this._events[type].length);                                                                 // 137\n      if (typeof console.trace === 'function') {                                                                // 138\n        // not supported in IE 10                                                                               // 139\n        console.trace();                                                                                        // 140\n      }                                                                                                         // 141\n    }                                                                                                           // 142\n  }                                                                                                             // 143\n                                                                                                                // 144\n  return this;                                                                                                  // 145\n};                                                                                                              // 146\n                                                                                                                // 147\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;                                                 // 148\n                                                                                                                // 149\nEventEmitter.prototype.once = function(type, listener) {                                                        // 150\n  if (!isFunction(listener))                                                                                    // 151\n    throw TypeError('listener must be a function');                                                             // 152\n                                                                                                                // 153\n  var fired = false;                                                                                            // 154\n                                                                                                                // 155\n  function g() {                                                                                                // 156\n    this.removeListener(type, g);                                                                               // 157\n                                                                                                                // 158\n    if (!fired) {                                                                                               // 159\n      fired = true;                                                                                             // 160\n      listener.apply(this, arguments);                                                                          // 161\n    }                                                                                                           // 162\n  }                                                                                                             // 163\n                                                                                                                // 164\n  g.listener = listener;                                                                                        // 165\n  this.on(type, g);                                                                                             // 166\n                                                                                                                // 167\n  return this;                                                                                                  // 168\n};                                                                                                              // 169\n                                                                                                                // 170\n// emits a 'removeListener' event iff the listener was removed                                                  // 171\nEventEmitter.prototype.removeListener = function(type, listener) {                                              // 172\n  var list, position, length, i;                                                                                // 173\n                                                                                                                // 174\n  if (!isFunction(listener))                                                                                    // 175\n    throw TypeError('listener must be a function');                                                             // 176\n                                                                                                                // 177\n  if (!this._events || !this._events[type])                                                                     // 178\n    return this;                                                                                                // 179\n                                                                                                                // 180\n  list = this._events[type];                                                                                    // 181\n  length = list.length;                                                                                         // 182\n  position = -1;                                                                                                // 183\n                                                                                                                // 184\n  if (list === listener ||                                                                                      // 185\n      (isFunction(list.listener) && list.listener === listener)) {                                              // 186\n    delete this._events[type];                                                                                  // 187\n    if (this._events.removeListener)                                                                            // 188\n      this.emit('removeListener', type, listener);                                                              // 189\n                                                                                                                // 190\n  } else if (isObject(list)) {                                                                                  // 191\n    for (i = length; i-- > 0;) {                                                                                // 192\n      if (list[i] === listener ||                                                                               // 193\n          (list[i].listener && list[i].listener === listener)) {                                                // 194\n        position = i;                                                                                           // 195\n        break;                                                                                                  // 196\n      }                                                                                                         // 197\n    }                                                                                                           // 198\n                                                                                                                // 199\n    if (position < 0)                                                                                           // 200\n      return this;                                                                                              // 201\n                                                                                                                // 202\n    if (list.length === 1) {                                                                                    // 203\n      list.length = 0;                                                                                          // 204\n      delete this._events[type];                                                                                // 205\n    } else {                                                                                                    // 206\n      list.splice(position, 1);                                                                                 // 207\n    }                                                                                                           // 208\n                                                                                                                // 209\n    if (this._events.removeListener)                                                                            // 210\n      this.emit('removeListener', type, listener);                                                              // 211\n  }                                                                                                             // 212\n                                                                                                                // 213\n  return this;                                                                                                  // 214\n};                                                                                                              // 215\n                                                                                                                // 216\nEventEmitter.prototype.removeAllListeners = function(type) {                                                    // 217\n  var key, listeners;                                                                                           // 218\n                                                                                                                // 219\n  if (!this._events)                                                                                            // 220\n    return this;                                                                                                // 221\n                                                                                                                // 222\n  // not listening for removeListener, no need to emit                                                          // 223\n  if (!this._events.removeListener) {                                                                           // 224\n    if (arguments.length === 0)                                                                                 // 225\n      this._events = {};                                                                                        // 226\n    else if (this._events[type])                                                                                // 227\n      delete this._events[type];                                                                                // 228\n    return this;                                                                                                // 229\n  }                                                                                                             // 230\n                                                                                                                // 231\n  // emit removeListener for all listeners on all events                                                        // 232\n  if (arguments.length === 0) {                                                                                 // 233\n    for (key in this._events) {                                                                                 // 234\n      if (key === 'removeListener') continue;                                                                   // 235\n      this.removeAllListeners(key);                                                                             // 236\n    }                                                                                                           // 237\n    this.removeAllListeners('removeListener');                                                                  // 238\n    this._events = {};                                                                                          // 239\n    return this;                                                                                                // 240\n  }                                                                                                             // 241\n                                                                                                                // 242\n  listeners = this._events[type];                                                                               // 243\n                                                                                                                // 244\n  if (isFunction(listeners)) {                                                                                  // 245\n    this.removeListener(type, listeners);                                                                       // 246\n  } else if (listeners) {                                                                                       // 247\n    // LIFO order                                                                                               // 248\n    while (listeners.length)                                                                                    // 249\n      this.removeListener(type, listeners[listeners.length - 1]);                                               // 250\n  }                                                                                                             // 251\n  delete this._events[type];                                                                                    // 252\n                                                                                                                // 253\n  return this;                                                                                                  // 254\n};                                                                                                              // 255\n                                                                                                                // 256\nEventEmitter.prototype.listeners = function(type) {                                                             // 257\n  var ret;                                                                                                      // 258\n  if (!this._events || !this._events[type])                                                                     // 259\n    ret = [];                                                                                                   // 260\n  else if (isFunction(this._events[type]))                                                                      // 261\n    ret = [this._events[type]];                                                                                 // 262\n  else                                                                                                          // 263\n    ret = this._events[type].slice();                                                                           // 264\n  return ret;                                                                                                   // 265\n};                                                                                                              // 266\n                                                                                                                // 267\nEventEmitter.prototype.listenerCount = function(type) {                                                         // 268\n  if (this._events) {                                                                                           // 269\n    var evlistener = this._events[type];                                                                        // 270\n                                                                                                                // 271\n    if (isFunction(evlistener))                                                                                 // 272\n      return 1;                                                                                                 // 273\n    else if (evlistener)                                                                                        // 274\n      return evlistener.length;                                                                                 // 275\n  }                                                                                                             // 276\n  return 0;                                                                                                     // 277\n};                                                                                                              // 278\n                                                                                                                // 279\nEventEmitter.listenerCount = function(emitter, type) {                                                          // 280\n  return emitter.listenerCount(type);                                                                           // 281\n};                                                                                                              // 282\n                                                                                                                // 283\nfunction isFunction(arg) {                                                                                      // 284\n  return typeof arg === 'function';                                                                             // 285\n}                                                                                                               // 286\n                                                                                                                // 287\nfunction isNumber(arg) {                                                                                        // 288\n  return typeof arg === 'number';                                                                               // 289\n}                                                                                                               // 290\n                                                                                                                // 291\nfunction isObject(arg) {                                                                                        // 292\n  return typeof arg === 'object' && arg !== null;                                                               // 293\n}                                                                                                               // 294\n                                                                                                                // 295\nfunction isUndefined(arg) {                                                                                     // 296\n  return arg === void 0;                                                                                        // 297\n}                                                                                                               // 298\n                                                                                                                // 299\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\"extensions\":[\".js\",\".json\"]});\nvar exports = require(\"./node_modules/meteor/modules/client.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.modules = exports, {\n  meteorInstall: meteorInstall,\n  Buffer: Buffer,\n  process: process\n});\n\n})();\n","servePath":"/packages/modules.js","sourceMap":{"version":3,"sources":["/packages/modules/client.js","/packages/modules/buffer.js","/packages/modules/css.js","/packages/modules/install-packages.js","/packages/modules/process.js","/packages/modules/stubs.js","node_modules/meteor-node-stubs/package.json","node_modules/meteor-node-stubs/index.js","node_modules/meteor-node-stubs/map.json","node_modules/meteor-node-stubs/deps/buffer.js","node_modules/meteor-node-stubs/deps/process.js","node_modules/meteor-node-stubs/deps/domain.js","node_modules/meteor-node-stubs/node_modules/buffer/package.json","node_modules/meteor-node-stubs/node_modules/buffer/index.js","node_modules/meteor-node-stubs/node_modules/base64-js/package.json","node_modules/meteor-node-stubs/node_modules/base64-js/lib/b64.js","node_modules/meteor-node-stubs/node_modules/ieee754/package.json","node_modules/meteor-node-stubs/node_modules/ieee754/index.js","node_modules/meteor-node-stubs/node_modules/isarray/package.json","node_modules/meteor-node-stubs/node_modules/isarray/index.js","node_modules/meteor-node-stubs/node_modules/process/browser.js","node_modules/meteor-node-stubs/node_modules/domain-browser/package.json","node_modules/meteor-node-stubs/node_modules/domain-browser/index.js","node_modules/meteor-node-stubs/node_modules/events/package.json","node_modules/meteor-node-stubs/node_modules/events/events.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,oH;;;;;;;;;;;ACNA;AACA;AACA;AACA,oH;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qH;;;;;;;;;;;ACrsH;;;;;;;;;;;AC5HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qH;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA,oH;;;;;;;;;;;ACNA;AACA;AACA;AACA,oH;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qH;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qH;;;;;;;;;;;ACxCA;AACA,oH;;;;;;;;;;;ACDA;AACA,oH;;;;;;;;;;;ACDA;AACA,oH;;;;;;;;;;;ACDA;AACA;AACA;AACA,ouH;;;;;;;;;;;ACt7CA;AACA;AACA;AACA,osH;;;;;;;;;;;ACnIA;AACA;AACA;AACA,oH;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qH;;;;;;;;;;;ACpFA;AACA;AACA;AACA,oH;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA,oH;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qH;;;;;;;;;;;AC3FA;AACA;AACA;AACA,oH;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qH;;;;;;;;;;;ACrEA;AACA;AACA;AACA,osH","file":"/packages/modules.js","sourcesContent":["require(\"./install-packages.js\");\nrequire(\"./stubs.js\");\nrequire(\"./buffer.js\");\nrequire(\"./process.js\");\n\nexports.addStyles = require(\"./css\").addStyles;\n","try {\n  Buffer = global.Buffer || require(\"buffer\").Buffer;\n} catch (noBuffer) {}\n","var doc = document;\nvar head = doc.getElementsByTagName(\"head\").item(0);\n\nexports.addStyles = function (css) {\n  var style = doc.createElement(\"style\");\n\n  style.setAttribute(\"type\", \"text/css\");\n\n  // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx\n  var internetExplorerSheetObject =\n    style.sheet || // Edge/IE11.\n    style.styleSheet; // Older IEs.\n\n  if (internetExplorerSheetObject) {\n    internetExplorerSheetObject.cssText = css;\n  } else {\n    style.appendChild(doc.createTextNode(css));\n  }\n\n  return head.appendChild(style);\n};\n","function install(name) {\n  var meteorDir = {};\n\n  // Given a package name <name>, install a stub module in the\n  // /node_modules/meteor directory called <name>.js, so that\n  // require.resolve(\"meteor/<name>\") will always return\n  // /node_modules/meteor/<name>.js instead of something like\n  // /node_modules/meteor/<name>/index.js, in the rare but possible event\n  // that the package contains a file called index.js (#6590).\n  meteorDir[name + \".js\"] = function (r, e, module) {\n    module.exports = Package[name];\n  };\n\n  meteorInstall({\n    node_modules: {\n      meteor: meteorDir\n    }\n  });\n}\n\n// This file will be modified during computeJsOutputFilesMap to include\n// install(<name>) calls for every Meteor package.\n\ninstall(\"underscore\");\ninstall(\"meteor\");\ninstall(\"meteor-base\");\ninstall(\"mobile-experience\");\ninstall(\"babel-compiler\");\ninstall(\"ecmascript\");\ninstall(\"base64\");\ninstall(\"ejson\");\ninstall(\"id-map\");\ninstall(\"ordered-dict\");\ninstall(\"tracker\");\ninstall(\"modules-runtime\");\ninstall(\"modules\");\ninstall(\"es5-shim\");\ninstall(\"promise\");\ninstall(\"ecmascript-runtime\");\ninstall(\"babel-runtime\");\ninstall(\"random\");\ninstall(\"mongo-id\");\ninstall(\"diff-sequence\");\ninstall(\"geojson-utils\");\ninstall(\"minimongo\");\ninstall(\"check\");\ninstall(\"retry\");\ninstall(\"ddp-common\");\ninstall(\"reload\");\ninstall(\"ddp-client\");\ninstall(\"ddp\");\ninstall(\"ddp-server\");\ninstall(\"allow-deny\");\ninstall(\"mongo\");\ninstall(\"blaze-html-templates\");\ninstall(\"reactive-dict\");\ninstall(\"session\");\ninstall(\"jquery\");\ninstall(\"url\");\ninstall(\"http\");\ninstall(\"deps\");\ninstall(\"htmljs\");\ninstall(\"observe-sequence\");\ninstall(\"reactive-var\");\ninstall(\"blaze\");\ninstall(\"ui\");\ninstall(\"spacebars\");\ninstall(\"templating\");\ninstall(\"iron:core\");\ninstall(\"iron:dynamic-template\");\ninstall(\"iron:layout\");\ninstall(\"iron:url\");\ninstall(\"iron:middleware-stack\");\ninstall(\"iron:location\");\ninstall(\"iron:controller\");\ninstall(\"iron:router\");\ninstall(\"twbs:bootstrap\");\ninstall(\"d3js:d3\");\ninstall(\"standard-minifier-css\");\ninstall(\"standard-minifier-js\");\ninstall(\"limemakers:three\");\ninstall(\"pcel:loading\");\ninstall(\"spectrum:material-design-lite\");\ninstall(\"timmyg:wow\");\ninstall(\"ddp-rate-limiter\");\ninstall(\"localstorage\");\ninstall(\"callback-hook\");\ninstall(\"accounts-base\");\ninstall(\"service-configuration\");\ninstall(\"npm-bcrypt\");\ninstall(\"sha\");\ninstall(\"srp\");\ninstall(\"accounts-password\");\ninstall(\"less\");\ninstall(\"accounts-ui-unstyled\");\ninstall(\"accounts-ui\");\ninstall(\"coffeescript\");\ninstall(\"zimme:active-route\");\ninstall(\"gwendall:auth-client-callbacks\");\ninstall(\"meteortoys:toykit\");\ninstall(\"msavin:mongol\");\ninstall(\"msavin:jetsetter\");\ninstall(\"meteortoys:blueprint\");\ninstall(\"meteortoys:authenticate\");\ninstall(\"meteortoys:shell\");\ninstall(\"meteortoys:method\");\ninstall(\"meteortoys:result\");\ninstall(\"meteortoys:autopub\");\ninstall(\"meteortoys:pub\");\ninstall(\"meteortoys:sub\");\ninstall(\"meteortoys:email\");\ninstall(\"meteortoys:listen\");\ninstall(\"meteortoys:throttle\");\ninstall(\"meteortoys:status\");\ninstall(\"meteortoys:hotreload\");\ninstall(\"meteortoys:allthings\");\ninstall(\"fortawesome:fontawesome\");\ninstall(\"chrismbeckett:toastr\");\ninstall(\"stolinski:stylus-multi\");\ninstall(\"webapp\");\ninstall(\"livedata\");\ninstall(\"hot-code-push\");\ninstall(\"launch-screen\");\ninstall(\"autoupdate\");\n","try {\n  // The application can run `npm install process` to provide its own\n  // process stub; otherwise this module will provide a partial stub.\n  process = global.process || require(\"process\");\n} catch (noProcess) {\n  process = {};\n}\n\nif (Meteor.isServer) {\n  // Make require(\"process\") work on the server in all versions of Node.\n  meteorInstall({\n    node_modules: {\n      \"process.js\": function (r, e, module) {\n        module.exports = process;\n      }\n    }\n  });\n} else {\n  process.platform = \"browser\";\n  process.nextTick = process.nextTick || Meteor._setImmediate;\n}\n\nif (typeof process.env !== \"object\") {\n  process.env = {};\n}\n\n_.extend(process.env, meteorEnv);\n","try {\n  // When meteor-node-stubs is installed in the application's root\n  // node_modules directory, requiring it here installs aliases for stubs\n  // for all Node built-in modules, such as fs, util, and http.\n  require(\"meteor-node-stubs\");\n} catch (noStubs) {}\n","exports.name = \"meteor-node-stubs\";\nexports.version = \"0.2.1\";\nexports.main = \"index.js\";\n","var map = require(\"./map.json\");\nvar meteorAliases = {};\n\nObject.keys(map).forEach(function (id) {\n  if (typeof map[id] === \"string\") {\n    try {\n      exports[id] = meteorAliases[id + \".js\"] =\n        require.resolve(map[id]);\n    } catch (e) {\n      // Resolution can fail at runtime if the stub was not included in the\n      // bundle because nothing depended on it.\n    }\n  } else {\n    exports[id] = map[id];\n    meteorAliases[id + \".js\"] = function(){};\n  }\n});\n\nif (typeof meteorInstall === \"function\") {\n  meteorInstall({\n    // Install the aliases into a node_modules directory one level up from\n    // the root directory, so that they do not clutter the namespace\n    // available to apps and packages.\n    \"..\": {\n      node_modules: meteorAliases\n    }\n  });\n}\n","module.exports = {\n  \"assert\": \"assert/\",\n  \"buffer\": \"buffer/\",\n  \"child_process\": null,\n  \"cluster\": null,\n  \"console\": \"console-browserify\",\n  \"constants\": \"constants-browserify\",\n  \"crypto\": \"crypto-browserify\",\n  \"dgram\": null,\n  \"dns\": null,\n  \"domain\": \"domain-browser\",\n  \"events\": \"events/\",\n  \"fs\": null,\n  \"http\": \"http-browserify\",\n  \"https\": \"https-browserify\",\n  \"module\": null,\n  \"net\": null,\n  \"os\": \"os-browserify/browser.js\",\n  \"path\": \"path-browserify\",\n  \"process\": \"process/browser.js\",\n  \"punycode\": \"punycode/\",\n  \"querystring\": \"querystring-es3/\",\n  \"readline\": null,\n  \"repl\": null,\n  \"stream\": \"stream-browserify\",\n  \"_stream_duplex\": \"readable-stream/duplex.js\",\n  \"_stream_passthrough\": \"readable-stream/passthrough.js\",\n  \"_stream_readable\": \"readable-stream/readable.js\",\n  \"_stream_transform\": \"readable-stream/transform.js\",\n  \"_stream_writable\": \"readable-stream/writable.js\",\n  \"string_decoder\": \"string_decoder/\",\n  \"sys\": \"util/util.js\",\n  \"timers\": \"timers-browserify\",\n  \"tls\": null,\n  \"tty\": \"tty-browserify\",\n  \"url\": \"url/\",\n  \"util\": \"util/util.js\",\n  \"vm\": \"vm-browserify\",\n  \"zlib\": \"browserify-zlib\"\n};\n","require(\"buffer/\");\n","require(\"process/browser.js\");\n","require(\"domain-browser\");\n","exports.name = \"buffer\";\nexports.version = \"4.5.0\";\nexports.main = \"index.js\";\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\nBuffer.poolSize = 8192 // not used by this implementation\n\nvar rootParent = {}\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.foo = function () { return 42 }\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\nfunction Buffer (arg) {\n  if (!(this instanceof Buffer)) {\n    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.\n    if (arguments.length > 1) return new Buffer(arg, arguments[1])\n    return new Buffer(arg)\n  }\n\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    this.length = 0\n    this.parent = undefined\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    return fromNumber(this, arg)\n  }\n\n  // Slightly less common case.\n  if (typeof arg === 'string') {\n    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')\n  }\n\n  // Unusual.\n  return fromObject(this, arg)\n}\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction fromNumber (that, length) {\n  that = allocate(that, length < 0 ? 0 : checked(length) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < length; i++) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'\n\n  // Assumption: byteLength() return value is always < kMaxLength.\n  var length = byteLength(string, encoding) | 0\n  that = allocate(that, length)\n\n  that.write(string, encoding)\n  return that\n}\n\nfunction fromObject (that, object) {\n  if (Buffer.isBuffer(object)) return fromBuffer(that, object)\n\n  if (isArray(object)) return fromArray(that, object)\n\n  if (object == null) {\n    throw new TypeError('must start with number, buffer, array or string')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined') {\n    if (object.buffer instanceof ArrayBuffer) {\n      return fromTypedArray(that, object)\n    }\n    if (object instanceof ArrayBuffer) {\n      return fromArrayBuffer(that, object)\n    }\n  }\n\n  if (object.length) return fromArrayLike(that, object)\n\n  return fromJsonObject(that, object)\n}\n\nfunction fromBuffer (that, buffer) {\n  var length = checked(buffer.length) | 0\n  that = allocate(that, length)\n  buffer.copy(that, 0, 0, length)\n  return that\n}\n\nfunction fromArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Duplicate of fromArray() to keep fromArray() monomorphic.\nfunction fromTypedArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  // Truncating the elements is probably not what people expect from typed\n  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior\n  // of the old Buffer constructor.\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(array)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromTypedArray(that, new Uint8Array(array))\n  }\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.\n// Returns a zero-length buffer for inputs that don't conform to the spec.\nfunction fromJsonObject (that, object) {\n  var array\n  var length = 0\n\n  if (object.type === 'Buffer' && isArray(object.data)) {\n    array = object.data\n    length = checked(array.length) | 0\n  }\n  that = allocate(that, length)\n\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n} else {\n  // pre-set for values that may exist in the future\n  Buffer.prototype.length = undefined\n  Buffer.prototype.parent = undefined\n}\n\nfunction allocate (that, length) {\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that.length = length\n  }\n\n  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1\n  if (fromPool) that.parent = rootParent\n\n  return that\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (subject, encoding) {\n  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)\n\n  var buf = new Buffer(subject, encoding)\n  delete buf.parent\n  return buf\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  var i = 0\n  var len = Math.min(x, y)\n  while (i < len) {\n    if (a[i] !== b[i]) break\n\n    ++i\n  }\n\n  if (i !== len) {\n    x = a[i]\n    y = b[i]\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')\n\n  if (list.length === 0) {\n    return new Buffer(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; i++) {\n      length += list[i].length\n    }\n  }\n\n  var buf = new Buffer(length)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var item = list[i]\n    item.copy(buf, pos)\n    pos += item.length\n  }\n  return buf\n}\n\nfunction byteLength (string, encoding) {\n  if (typeof string !== 'string') string = '' + string\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'binary':\n      // Deprecated\n      case 'raw':\n      case 'raws':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  start = start | 0\n  end = end === undefined || end === Infinity ? this.length : end | 0\n\n  if (!encoding) encoding = 'utf8'\n  if (start < 0) start = 0\n  if (end > this.length) end = this.length\n  if (end <= start) return ''\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return 0\n  return Buffer.compare(this, b)\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset) {\n  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff\n  else if (byteOffset < -0x80000000) byteOffset = -0x80000000\n  byteOffset >>= 0\n\n  if (this.length === 0) return -1\n  if (byteOffset >= this.length) return -1\n\n  // Negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\n  if (typeof val === 'string') {\n    if (val.length === 0) return -1 // special case: looking for empty string always fails\n    return String.prototype.indexOf.call(this, val, byteOffset)\n  }\n  if (Buffer.isBuffer(val)) {\n    return arrayIndexOf(this, val, byteOffset)\n  }\n  if (typeof val === 'number') {\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n    }\n    return arrayIndexOf(this, [ val ], byteOffset)\n  }\n\n  function arrayIndexOf (arr, val, byteOffset) {\n    var foundIndex = -1\n    for (var i = 0; byteOffset + i < arr.length; i++) {\n      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex\n      } else {\n        foundIndex = -1\n      }\n    }\n    return -1\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) throw new Error('Invalid hex string')\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    var swap = encoding\n    encoding = offset\n    offset = length | 0\n    length = swap\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'binary':\n        return binaryWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  if (newBuf.length) newBuf.parent = this.parent || this\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n  if (offset < 0) throw new RangeError('index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; i--) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; i++) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// fill(value, start=0, end=buffer.length)\nBuffer.prototype.fill = function fill (value, start, end) {\n  if (!value) value = 0\n  if (!start) start = 0\n  if (!end) end = this.length\n\n  if (end < start) throw new RangeError('end < start')\n\n  // Fill 0 bytes; we're done\n  if (end === start) return\n  if (this.length === 0) return\n\n  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')\n  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')\n\n  var i\n  if (typeof value === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = value\n    }\n  } else {\n    var bytes = utf8ToBytes(value.toString())\n    var len = bytes.length\n    for (i = start; i < end; i++) {\n      this[i] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; i++) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n","exports.name = \"base64-js\";\nexports.version = \"1.0.4\";\nexports.main = \"lib/b64.js\";\n",";(function (exports) {\n  'use strict'\n\n  var i\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n  var lookup = []\n  for (i = 0; i < code.length; i++) {\n    lookup[i] = code[i]\n  }\n  var revLookup = []\n\n  for (i = 0; i < code.length; ++i) {\n    revLookup[code.charCodeAt(i)] = i\n  }\n  revLookup['-'.charCodeAt(0)] = 62\n  revLookup['_'.charCodeAt(0)] = 63\n\n  var Arr = (typeof Uint8Array !== 'undefined')\n    ? Uint8Array\n    : Array\n\n  function decode (elt) {\n    var v = revLookup[elt.charCodeAt(0)]\n    return v !== undefined ? v : -1\n  }\n\n  function b64ToByteArray (b64) {\n    var i, j, l, tmp, placeHolders, arr\n\n    if (b64.length % 4 > 0) {\n      throw new Error('Invalid string. Length must be a multiple of 4')\n    }\n\n    // the number of equal signs (place holders)\n    // if there are two placeholders, than the two characters before it\n    // represent one byte\n    // if there is only one, then the three characters before it represent 2 bytes\n    // this is just a cheap hack to not do indexOf twice\n    var len = b64.length\n    placeHolders = b64.charAt(len - 2) === '=' ? 2 : b64.charAt(len - 1) === '=' ? 1 : 0\n\n    // base64 is 4/3 + up to two characters of the original data\n    arr = new Arr(b64.length * 3 / 4 - placeHolders)\n\n    // if there are placeholders, only get up to the last complete 4 chars\n    l = placeHolders > 0 ? b64.length - 4 : b64.length\n\n    var L = 0\n\n    function push (v) {\n      arr[L++] = v\n    }\n\n    for (i = 0, j = 0; i < l; i += 4, j += 3) {\n      tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n      push((tmp & 0xFF0000) >> 16)\n      push((tmp & 0xFF00) >> 8)\n      push(tmp & 0xFF)\n    }\n\n    if (placeHolders === 2) {\n      tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n      push(tmp & 0xFF)\n    } else if (placeHolders === 1) {\n      tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n      push((tmp >> 8) & 0xFF)\n      push(tmp & 0xFF)\n    }\n\n    return arr\n  }\n\n  function encode (num) {\n    return lookup[num]\n  }\n\n  function tripletToBase64 (num) {\n    return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n  }\n\n  function encodeChunk (uint8, start, end) {\n    var temp\n    var output = []\n    for (var i = start; i < end; i += 3) {\n      temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n      output.push(tripletToBase64(temp))\n    }\n    return output.join('')\n  }\n\n  function uint8ToBase64 (uint8) {\n    var i\n    var extraBytes = uint8.length % 3 // if we have 1 byte left, pad 2 bytes\n    var output = ''\n    var parts = []\n    var temp, length\n    var maxChunkLength = 16383 // must be multiple of 3\n\n    // go through the array every three bytes, we'll deal with trailing stuff later\n\n    for (i = 0, length = uint8.length - extraBytes; i < length; i += maxChunkLength) {\n      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > length ? length : (i + maxChunkLength)))\n    }\n\n    // pad the end with zeros, but make sure to not forget the extra bytes\n    switch (extraBytes) {\n      case 1:\n        temp = uint8[uint8.length - 1]\n        output += encode(temp >> 2)\n        output += encode((temp << 4) & 0x3F)\n        output += '=='\n        break\n      case 2:\n        temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n        output += encode(temp >> 10)\n        output += encode((temp >> 4) & 0x3F)\n        output += encode((temp << 2) & 0x3F)\n        output += '='\n        break\n      default:\n        break\n    }\n\n    parts.push(output)\n\n    return parts.join('')\n  }\n\n  exports.toByteArray = b64ToByteArray\n  exports.fromByteArray = uint8ToBase64\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))\n","exports.name = \"ieee754\";\nexports.version = \"1.1.6\";\nexports.main = \"index.js\";\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","exports.name = \"isarray\";\nexports.version = \"1.0.0\";\nexports.main = \"index.js\";\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","exports.name = \"domain-browser\";\nexports.version = \"1.1.7\";\nexports.main = \"./index.js\";\n","// This file should be ES5 compatible\n/* eslint prefer-spread:0, no-var:0, prefer-reflect:0, no-magic-numbers:0 */\n'use strict'\nmodule.exports = (function () {\n\t// Import Events\n\tvar events = require('events')\n\n\t// Export Domain\n\tvar domain = {}\n\tdomain.createDomain = domain.create = function () {\n\t\tvar d = new events.EventEmitter()\n\n\t\tfunction emitError (e) {\n\t\t\td.emit('error', e)\n\t\t}\n\n\t\td.add = function (emitter) {\n\t\t\temitter.on('error', emitError)\n\t\t}\n\t\td.remove = function (emitter) {\n\t\t\temitter.removeListener('error', emitError)\n\t\t}\n\t\td.bind = function (fn) {\n\t\t\treturn function () {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments)\n\t\t\t\ttry {\n\t\t\t\t\tfn.apply(null, args)\n\t\t\t\t}\n\t\t\t\tcatch (err) {\n\t\t\t\t\temitError(err)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\td.intercept = function (fn) {\n\t\t\treturn function (err) {\n\t\t\t\tif ( err ) {\n\t\t\t\t\temitError(err)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar args = Array.prototype.slice.call(arguments, 1)\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfn.apply(null, args)\n\t\t\t\t\t}\n\t\t\t\t\tcatch (err) {\n\t\t\t\t\t\temitError(err)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\td.run = function (fn) {\n\t\t\ttry {\n\t\t\t\tfn()\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\temitError(err)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\t\td.dispose = function () {\n\t\t\tthis.removeAllListeners()\n\t\t\treturn this\n\t\t}\n\t\td.enter = d.exit = function () {\n\t\t\treturn this\n\t\t}\n\t\treturn d\n\t}\n\treturn domain\n}).call(this)\n","exports.name = \"events\";\nexports.version = \"1.1.0\";\nexports.main = \"./events.js\";\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n"]}}]